<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[微信公众号开发调试办法]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E5%8A%9E%E6%B3%95.html</url>
    <content type="text"><![CDATA[在微信公众号开发的过程中，我们会遇到一些必须是线上环境才能使用的问题，那么怎么才能在本地进行开发呢？ 问题本地开发问题所在主要是因为微信需要验证域名，只要本地使用域名访问即可，当然前提是你的域名已经经过验证了。 原理利用hosts把域名指向本地，然后用域名访问本地服务即可。 解决方案知道原理后，方案有很多，下面简单写几种 方案一 修改hosts 例如：127.0.0.1 demo.com 把服务改为 80 端口启动 用微信开发者工具访问demo.com即可开始调试 优点简单易懂，缺点配置不灵活，只适合单个服务 方案二 修改hosts 例如：127.0.0.1 demo.com 本地安装nginx 利用 nginx 的反向代理，把请求代理到本地的各个服务上去 用微信开发者工具访问demo.com即可开始调试 优点可配置多个服务，缺点配置较为复杂 一些工具有一些专门改配置的工具，可以帮助我们快速的进行配置，下面推荐一些 surge 网络代理抓包工具，内有 hosts 修改，Mac 和 iPhone 可用 SwitchHosts 快速修改 hosts，开源免费，多平台]]></content>
      <tags>
        <tag>微信</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7安装PHP+MySql+Nginx+Wordpress]]></title>
    <url>%2FCentos7%E5%AE%89%E8%A3%85PHP-MySql-Nginx-Wordpress.html</url>
    <content type="text"><![CDATA[公司需要一个新闻发布的系统，WordPress 是一个不错选择，记录下安装过程，以便今后使用有所参考 安装 PHP 及其扩展包增加仓库CentOS/RHEL 7.x:12rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm CentOS/RHEL 6.x:12rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpmrpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm 按需安装1yum install php71w-bcmath php71w-cli php71w-common php71w-dba php71w-devel php71w-embedded php71w-enchant php71w-fpm php71w-gd php71w-imap php71w-interbase php71w-intl php71w-ldap php71w-mbstring php71w-mcrypt php71w-mysqlnd php71w-odbc php71w-opcache php71w-pdo php71w-pdo_dblib php71w-pear php71w-pecl-apcu php71w-pecl-apcu-devel php71w-pecl-geoip php71w-pecl-igbinary php71w-pecl-igbinary-devel php71w-pecl-imagick php71w-pecl-imagick-devel php71w-pecl-memcached php71w-pecl-mongodb php71w-pecl-redis php71w-pgsql php71w-process php71w-pspell php71w-recode php71w-snmp php71w-soap php71w-tidy php71w-xml php71w-xmlrpc 全部安装1yum install -y php71w-bcmath php71w-cli php71w-common php71w-dba php71w-devel php71w-embedded php71w-enchant php71w-fpm php71w-gd php71w-imap php71w-interbase php71w-intl php71w-ldap php71w-mbstring php71w-mcrypt php71w-mysql php71w-mysqlnd php71w-odbc php71w-opcache php71w-pdo php71w-pdo_dblib php71w-pear php71w-pecl-apcu php71w-pecl-apcu-devel php71w-pecl-geoip php71w-pecl-igbinary php71w-pecl-igbinary-devel php71w-pecl-imagick php71w-pecl-imagick-devel php71w-pecl-memcached php71w-pecl-mongodb php71w-pecl-redis php71w-pecl-xdebug php71w-pgsql php71w-phpdbg php71w-process php71w-pspell php71w-recode php71w-snmp php71w-soap php71w-tidy php71w-xml php71w-xmlrpc 安装 MySQL如果有 RDS 一类的服务，可跳过此步骤 123456789101112131415yum localinstall http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpmyum install mysql-community-server//开启mysqlservice mysqld start//查看mysql的root账号的密码grep &apos;temporary password&apos; /var/log/mysqld.log//登录mysqlmysql -uroot -p//修改密码ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;password&apos;; 如果修改密码提示密码不合法，想要设置更加简单的方法可以设置校验等级 1set global validate_password_policy=0; 安装 Apache 和 PHP 模块12yum install -y httpdyum install -y mod_php71w 如果需要 nginx 作为代理服务器需配置 httpd 1vim /etc/httpd/conf/httpd.conf 找到Listen 80改为Listen 8080 安装 Nginx1yum install -y nginx 配置 Nginx进入 /etc/nginx/conf.d 目录新建一个配置文件，比如：wutong.conf 增加一个 server 配置段来当做虚拟主机 123456789101112131415161718192021222324server &#123; listen 80; server_name demo.com; error_log logs/demo.com_error.log error; location / &#123; try_files $uri $uri/ /index.php$is_args$args; &#125; #处理PHP格式的文件 location ~ \.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name; fastcgi_index index.php; fastcgi_buffers 256 128k; fastcgi_connect_timeout 300s; fastcgi_send_timeout 300s; fastcgi_read_timeout 300s; include fastcgi_params; &#125;&#125; 安装 wordpress下载安装 wordpress123wget https://cn.wordpress.org/latest-zh_CN.zip //下载 unzipunzip latest-zh_CN.zipmv wordpress/* /var/www/html 配置 wordpress 的配置文件，如果没有 vim 使用下面命令即可12cp wp-config-simple.php wp-config.phpvim wp-config.php //编辑wordpress的配置文件 数据库配置然后输入上面创建的数据库名称，用户名及密码。 123456789101112131415161718// ** MySQL 设置 - 具体信息来自您正在使用的主机 ** ///** WordPress数据库的名称 */define( 'DB_NAME', '数据库名' );/** MySQL数据库用户名 */define( 'DB_USER', '数据库用户名' );/** MySQL数据库密码 */define( 'DB_PASSWORD', '数据库密' );/** MySQL主机 */define( 'DB_HOST', 'localhost' );/** 创建数据表时默认的文字编码 */define( 'DB_CHARSET', 'utf8' );/** 数据库整理类型。如不确定请勿更改 */define( 'DB_COLLATE', '' ); 启动1234service nginx startservice php-fpm startservice httpd startservice mysqld start]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>centos</tag>
        <tag>mysql</tag>
        <tag>php</tag>
        <tag>wordpress</tag>
        <tag>运维</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前后端分离]]></title>
    <url>%2F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.html</url>
    <content type="text"><![CDATA[随着产品和技术的发展，我们对效率、产品质量的要求越来越高，而且随着开发团队越来越大，以往的混合开发的弊端越来越明显。急需更好的协作方式。 前后端分离不仅仅是开发人员的分离，更重要的是项目分离，架构分离。开发效率和质量得到极大的提高。 发展历程混合开发前后端在同一个项目中进行开发。由前端写好 HTML，给到后端转换成 jsp 等后端模板语言，并由后端进行渲染 前后端共用一个项目 后端开发量较大 不容易拓展，页面改版需要改的东西较多 发版不方便，任何改动都需要后端发版 前端基本没有脚手架 半分离（Ajax）前端实现基本骨架，内容从服务端获取，前端使用字符串拼接或者前端模板进行渲染 基本实现了前后分离 DOM 操作较多，性能不好，而且较为繁琐 没有路由概念，纯静态页面跳转 前端可用grunt gulp等脚手架工具进行打包，但自动化程度依旧不高 全分离（MV*） 前端实现路由跳转和页面渲染 前端可用webpack rollup等脚手架 自动化程度已经很高 SPA 会有空白页问题 可在前端实现鉴权操作 后端人员可只关注数据层，前后端可实现并行开发 前后端必须约定好接口规范 SPA 和 SSRSPA 单页面应用 首次加载较慢，需要完全加载才能展示 纯静态文件，可部署 cdn 不利于 SEO 流行框架Vue React AngularJS SSR 服务端渲染 加载相对较快，不用等待资源加载 可能需要占用更多的服务器资源 流行框架nuxt next 有利于 SEO 具体实现由于前端浏览器存在同源策略 （协议，域名，端口一致则为同源） 前后端只通过接口进行交互 方案一 前端和后端部署在同一服务器 用 nginx 代理到同一域名下 方案二 前后端部署在不同服务器 域名指向前端服务器，接口通过 nginx 代理(最好通过内网访问)或者后端允许跨域 老项目改造为保证不大范围影响现有项目的情况下，可逐步进行改造。 后端项目接口采用返回json的方式 后端接口前缀必须以/api开头，因为前端项目会占用/ 前后端项目前期需要部署到同一台服务器，主要目的是为了兼容老项目 前端采用框架为vue或react 建议为vue 上手较快，写法跟原生接近，但 vue3.x 后写法会偏向es6 全新项目根据需求可选择不同的框架 前后端约定接口 前后端并行开发 前后端进行联调 前后端分别部署并进行测试 测试完成部署到正式服务器 拓展阅读流行的前端框架 VueJs React NuxtJs NextJs Element Ant Design 课外阅读 你不得不了解的前后端分离原理！ 前后端分离架构概述]]></content>
      <tags>
        <tag>前后分离</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue+Vue Router+Vuex 实现鉴权]]></title>
    <url>%2FVue-Vue-Router-Vuex-%E5%AE%9E%E7%8E%B0%E9%89%B4%E6%9D%83.html</url>
    <content type="text"><![CDATA[工作中采用的前端框架为 vue，项目中经常会碰到鉴权问题，比如某个页面必须登录了才能用，或者必须提前获取到某些参数才行。这时候就需要进行拦截处理 原理 用户进入页面 判断是否符合条件，如果不符合跳转到对应页面进行补充 主要代码首先需要在router里面进行拦截，这里采用 router 的beforeEach 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import Vue from 'vue'import VueRouter from 'vue-router'import store from '../store'import _ from 'lodash'import &#123; getUserInfo &#125; from '@/service'Vue.use(VueRouter)const router = new VueRouter(&#123; base: process.env.BASE_URL, routes: [ &#123; path: '/', name: 'Home', redirect: &#123; name: 'Login' &#125;, meta: &#123; title: '首页' &#125; &#125;, &#123; path: '/user', name: 'User', meta: &#123; title: '首页', auth: ['user'] &#125; &#125; ]&#125;)router.beforeEach(async (to, from, next) =&gt; &#123; if (to.meta.title &amp;&amp; to.meta.title !== from.meta.title) &#123; document.title = to.meta.title &#125; const &#123; state, dispatch &#125; = store // 获取授权列表 并去重 let authList = [] to.matched.map(record =&gt; &#123; const auth = record.meta.auth if (auth) &#123; authList = _.union(authList, auth) &#125; &#125;) for (let index = 0; index &lt; authList.length; index++) &#123; const key = authList[index].toLocaleLowerCase() // 获取用户信息 if (key === 'user' &amp;&amp; !state.userInfo.id) &#123; try &#123; const user = await getUserInfo() dispatch('initUser', user) &#125; catch (e) &#123; next(&#123; replace: true, path: '/login', query: &#123; redirect: to.fullPath &#125; &#125;) &#125; &#125; &#125; next()&#125;)]]></content>
      <tags>
        <tag>vue</tag>
        <tag>vue router</tag>
        <tag>vuex</tag>
        <tag>鉴权</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终结 DTraceProviderBindings]]></title>
    <url>%2F%E7%BB%88%E7%BB%93-DTraceProviderBindings.html</url>
    <content type="text"><![CDATA[使用 hexo 的时候老是出现找不到./build/Release/DTraceProviderBindings这个包。真是给跪了。Google 了很多答案，发现都没什么用。下面就讲下我的解决办法，希望对你也有用。 方法一12345678910# 先卸载已安装的hexonpm uninstall hexo-cli hexo -g# 确保/usr/local/lib/node_modules/ 没有 hexo-clils /usr/local/lib/node_modules/# 确保 /usr/local/bin/ 没有 hexols /usr/local/bin/ | grep hexo# 再次安装npm install hexo-cli hexo -g# 检测是否有错hexo -v 方法二此法网上说的最多，但也没什么卵用 1npm install hexo --no-optional 方法三这个是我的方法，我在无意中发现，我的package.json中有两个hexo的依赖，我删除了devDependencies中的依赖，然后就没问题了 具体做法如下 1vim package.json 删除下面的东西 123"devDependencies": &#123; "hexo": "^3.1.0" # 如果有，删除此行 &#125; 如果不放心可运行以下命令 1234# 删除已安装的包rm -rf node_modules# 重新安装依赖npm i 以上就是解决办法。希望对你有用。]]></content>
      <tags>
        <tag>mac</tag>
        <tag>hexo</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于学习和未来，孩子必须明白这10个真相]]></title>
    <url>%2F%E5%85%B3%E4%BA%8E%E5%AD%A6%E4%B9%A0%E5%92%8C%E6%9C%AA%E6%9D%A5%EF%BC%8C%E5%AD%A9%E5%AD%90%E5%BF%85%E9%A1%BB%E6%98%8E%E7%99%BD%E8%BF%9910%E4%B8%AA%E7%9C%9F%E7%9B%B8.html</url>
    <content type="text"><![CDATA[[读后感] 关于学习和未来，孩子必须明白这10个真相原文：https://mp.weixin.qq.com/s/0KYYB4_j0_My6WTmx5HZkg [toc] 世界很公平 正是因为有人住高楼，有人在深沟，有人光万丈，有人一身锈，所以我们才要拼尽所有去努力，死磕到底不放弃，赢得属于自己的最大公平。 你努力的原因永远不要是金钱和名望，而应该是寻找你真实的自己。 要改变世界从现在做起，从小事做起，而且不要迷失自我 仅仅有情绪还是不够的。你还要有能力有行动去改变：当你变成站在人群中闪闪发光的人，你才有可能一言九鼎，打破偏见。 改变世界这样的大事，你要不断的去做，而且不要因为自己的能力限制而放弃。在这过程中，你会经历挫折，但也会收获更多。更重要的是你不要丢失你自己，丢失你的梦想。 你就是独一无二的 你唯有承认自己够平凡，才会在接纳自己、安放自己的同时，珍贵自己，创造奇迹。 你找不到世界上跟你完全一样的第二个人，如果你认为你和别人一样，你怎么做到别人做不到的事情 相貌并不能决定一切相貌可以决定一些事情，但并不是全部。相比外在，你更应该在意自己的内心。一个内心不强大的人，外在多么漂亮，多么强大都是无用的 聪明是聪明，善良是善良 真正聪明是善良 愚蠢的人都溺死在故作聪明的河里，而聪明的人都走到了大智若愚的山上。 溺死在河里证明他不聪明，并不能证明他不善良。 梦想很遥远，但是你正在走近它 梦想从来不遥远 请从此刻起，摒弃脑海里的战争，着手解决眼前事，去做那些具体的事儿，哪怕是一道悬而未解的数学题。 如果你有梦想，那么朝着你的梦想努力吧，不管多远，只要你坚持，都有可能到达 学习是一件有趣的事情 学习从来不快乐 学习是难的，但当它化成技能和本领，让你在这个世界游刃有余地行走时，你会明白，所有眼前的难，都是为了将来的易。 学习能让你了解自己，了解世界。没有比这更让人快乐的事情了。你现在的学习，是为了以后发现更加灿烂的世界，而你所经历的苦难，则是你更好的学习机会 允许自己经历所谓的失败 你终极的使命，就是找到你自己，做最真实的自己。 这点我认同，但是我并不认为你失败了，失败的是你并没有达到你的目标，并不是你 勤奋本身就是一个优秀的品质，不需要其他来证明 勤奋未必能补拙 勤奋不一定优秀，但如果你足够勤奋，你一定能发现自己优秀在何处。 即使你不断的为你爱的人付出，但是没有任何回应，也没有关系，你只是在证明你爱他，并不是证明他一定要爱你。 如果你不是很聪明，那么就用勤奋弥补，如果你很聪明，那就让勤奋助你跑的更快 成绩并不是那么重要 成绩依然至关重要 这成绩，并非仅仅指成绩单上的分数，还有你生而为人的素养：你的努力，你的修为，你的良善，你的底线，都在这成绩之内。 成绩是别人给你划的参考线，而收获才是你自己的。 成绩单上的成绩是别人眼中的你，而真实的你并不需要别人来评判 好的成绩是你融入集体的条件，真实的自己才是你毕生的追求]]></content>
      <tags>
        <tag>教育</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前后分离之Mock数据]]></title>
    <url>%2Fmock.html</url>
    <content type="text"><![CDATA[公司做项目自从前后分离之后，接口联调成了最耗时的事情。为了解决这个问题尝试下 mock 数据。 采用了以下技术 mockjs json-server 由于我们用的前端框架为 vue，这里就用 vue 做例子了 项目结构基本架构是vue-cli3的基本架构，相比前者多了mock文件夹 1234567891011|- mock |- api // 动态mock数据 |- news.json |- data // 静态mock数据 |- user.json |- mock.js // mockjs |- routes.js // 路由重写 |- server.js // mock服务|- public|- src... server.js1234567891011121314151617181920212223242526272829303132333435363738const jsonServer = require('json-server')const server = jsonServer.create()const mock = require('./mock') // 动态数据const routes = require('./routes')// Support middlewareconst middleware = jsonServer.defaults()server.use(middleware)const _ = require('underscore')const path = require('path')const fs = require('fs')const mockDir = path.join(__dirname, 'data')// 支持动态数据 mockjs 数据const base = mock()// 支持多个静态数据 json文件const files = fs.readdirSync(mockDir)files.forEach(function(file) &#123; _.extend(base, require(path.resolve(mockDir, file)))&#125;)const router = jsonServer.router(base)// 增加路由重写const rewriteRoutes = jsonServer.rewriter(routes)server.use(rewriteRoutes)// 添加自定义路由server.use(router)// 返回自定义格式数据router.render = (req, res) =&gt; &#123; res.jsonp(&#123; data: res.locals.data, errcode: 200, errmsg: '' &#125;)&#125;// 启动服务server.listen(9090, () =&gt; &#123; console.log('JSON Server is running')&#125;) routes.js12345module.exports = &#123; '/mock/*': '/$1', '/posts/:id': '/posts', '/blog/:resource/:id/show': '/:resource/:id'&#125; mock.js1234567891011121314151617181920// 用mockjs模拟生成数据const Mock = require('mockjs')const _ = require('underscore')const path = require('path')const fs = require('fs')const mockDir = path.join(__dirname, 'api')// 支持动态数据 mockjs 数据const base = &#123;&#125;// 支持多个静态数据 json文件const files = fs.readdirSync(mockDir)files.forEach(function(file) &#123; _.extend(base, require(path.resolve(mockDir, file)))&#125;)// mock 数据const mock = Mock.mock(base)module.exports = () =&gt; &#123; return mock&#125; data 静态 mock 数据以user.json为例 1234567&#123; "user": &#123; "id": 890, "name": "演示001", "status": 1 &#125;&#125; api 动态 mock 数据以course.json为例 1234567891011&#123; "course|227": [ &#123; "id|+1": 1000, "course_name": "@ctitle(5,10)", "autor": "@cname", "college": "@ctitle(6)", "category_Id|1-6": 1 &#125; ]&#125; package.json 配置增加npm scripts 123"scripts": &#123; "mock": "node mock/server.js"&#125; vue.config.js 配置12345678devServer: &#123; proxy: &#123; '/mock': &#123; target: 'http://localhost:9090', changeOrigin: true &#125; &#125; &#125; 常用占位符1234567891011&quot;自然数&quot;: &quot;@natural&quot;,&quot;浮点数&quot;: &quot;@float&quot;,&quot;日期&quot;: &quot;@date&quot;,&quot;时间&quot;: &quot;@time&quot;,&quot;标题&quot;: &quot;@title&quot;,&quot;中文名字&quot;: &quot;@cname&quot;,&quot;网址&quot;: &quot;@url&quot;,&quot;域名&quot;: &quot;@domain&quot;,&quot;邮箱&quot;: &quot;@email&quot;,&quot;段落&quot;: &quot;@paragraph&quot;,&quot;句子&quot;: &quot;@sentence&quot;]]></content>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>前后分离</tag>
        <tag>mock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从立场、感受、意见转换成目标、方法、行动]]></title>
    <url>%2Ffrom-the-position-feelings-opinions-into-goals-methods-and-action.html</url>
    <content type="text"><![CDATA[今天又把罗辑思维最后一期视频节目给看了一遍，给我感触最深的是那句话，把观念从立场、感受、意见转换成目标、方法、行动。 立场、感受、意见这种思考方式我现在还有，遇见事情第一反应就是感谢的判断，用自己的立场去理解判断这个事情，最后的结论可能会给我带来很大的伤害。 目标、方法、行动这种思考方式到现在还没有完全掌握。不过我知道，只要我还有一个想要实现的目标，那就行动，然后在行动中不断调整自己，找对方法。 成长型思维和固定型思维说到这里，跟今天看到的另一个视频 我们应该学习好成长型思维，从挫折中受益，不断前行。]]></content>
      <categories>
        <category>wake</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[做一个爱动的小孩子]]></title>
    <url>%2Fdo-a-child-immediately-action.html</url>
    <content type="text"><![CDATA[最近的一些变动让我有了一些反思，就是我们该如何进行下一步的规划。我的家庭条件并不优越，甚至目前来说可以说了惨淡来形容，那么摆在我面前的无非就是两条路，继续碌碌无为，或者马上行动改变它。一切的话语都不如立刻行动。 不做乖孩子从小就听话的我，从初中之后越来越不听话了，虽然碰了很多钉子，我越来越发现，自己曾经受到的教育有多么的失败。 每个人都会有很多遗憾，这些遗憾其实会在不知不觉中投射到你对孩子的教育当中去，即便我们有所察觉，甚至有所注意，也会不停的影响你，甚至改变你。 当了父亲之后，我才渐渐明白，父母想在孩子面前表现的多么的成功，可是我们的内心却又感觉自己是多么的失败，我们把自己内心的恐惧，懦弱强加到孩子身上，我们希望他们去战胜它，改变他。可我们自身却羞于改变 随着孩子的成长，他会渐渐发现，这不是他的人生，而是父母的人生。于是开始反叛，而所造成的伤害，不仅伤害了孩子，也伤害了自己 每个人都有不同的性格，不同的环境，不同的机遇，也就注定有不同的人生。 找自己的路思想开放仅仅是第一步，接下来才是最重要的，改变，行动。 每一步的改变都伴随巨大的痛苦，我们如何能战胜自己，走出自己的路呢？ 答案就是学习学习是我们改变的第一步。 从书本里学习书籍是大师们与世界交流的工具，能与大师们隔空交流是多么幸运的事情。当然也有不是很好的书籍，或者说这本书不适合你更为准确。 从实践中学习实践是检验真理的唯一标准。更准确的说是你检验真理的唯一标准。我们处在一个极其复杂的环境当中，遇到的问题也是千奇百怪，同样一个解决办法，可能产生不同的的结果。但是你不去做就永远不知道结果是什么 从交流中学习家人，朋友，老师，同学，同事，甚至是陌生人。我们处在一个复杂的社会网络中。别人的一句话可能影响你的一生。把自己融入其中，会发现不一样的自己 从观察中学习格物致知，我的理解就是对事物的观察。留心观察身边的事物，会让我们更理解这个世界。 总结本来想记录下自己的行动，没想到说了一大堆行动的依据，不过这些东西可能更通用一些，以作记录吧。]]></content>
      <categories>
        <category>wake</category>
      </categories>
      <tags>
        <tag>成长</tag>
        <tag>孩子</tag>
        <tag>教育</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信公众号开发bug之自定义分享]]></title>
    <url>%2Fmp-bug-diy-share.html</url>
    <content type="text"><![CDATA[最近在做微信公众号自定义分享时碰到一个问题，就是自定义分享的时候有时候成功有时候失败，大部分都是失败。这里总结下自己解决的方法 前期准备 申请好的微信公众号账号 先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS 接口安全域名”。 页面已引入微信官方的 JSSDK，由于 SDK 版本升级了，可以引入新版本的 SDK，但是微信官方工具竟然不支持调试 通过 config 接口注入权限验证配置 这里可通过后台接口返回相应的配置 通过 ready 接口处理成功验证 分享的代码要写在这部分 通过 error 接口处理失败验证 如果第一次配置失败了，还可以通过此接口再配置一次 注意基本上通过上面的配置就能实现自定义分享了，但是其实还有一些细节需要注意 上面第 4 步中 如果 SDK 是老版本配置如下 jsApiList:[&#39;onMenuShareTimeline&#39;,&#39;onMenuShareAppMessage&#39;,&#39;onMenuShareQQ&#39;,&#39;onMenuShareQZone&#39;] 如果 SDK 为 1.4.0 以上版本 jsApiList:[&#39;updateAppMessageShareData&#39;,&#39;updateTimelineShareData&#39;] 第 5 步中的配置如下 12345678910111213141516171819const config = &#123; title: &apos;&apos;, // 分享标题 desc: &apos;&apos;, // 分享描述 link: &apos;&apos;, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致 imgUrl: &apos;&apos;, // 分享图标 success: function () &#123; // 设置成功 &#125;&#125;wx.ready(function () &#123; //需在用户可能点击分享按钮前就先调用 // 老版本写法 wx.onMenuShareTimeline(config) wx.onMenuShareAppMessage(config) wx.onMenuShareQQ(config) wx.onMenuShareQZone(config) // 新版本 wx.updateAppMessageShareData(config) wx.updateTimelineShareData(config)&#125;); 这里需要注意的是 link中的分享链接如果当中包含中文一定要进行encode]]></content>
      <tags>
        <tag>微信</tag>
        <tag>微信开发</tag>
        <tag>公众号</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[保险漫谈]]></title>
    <url>%2FInsurancetoramble.html</url>
    <content type="text"><![CDATA[最近媳妇找工作，机缘巧合去做了保险代理人，我本身从事的行业也跟保险相关，不过也是最近才真正的去认真了解这个行业，才发现原来对这个行业有那么多的不了解。写这个也是谈下自己的一些感触 为什么感觉卖保险的都是骗子？一提到保险，很多人包括我都认为是骗子，其中的原因有很多，逐个来分析下 从产品的角度保险产品看不见摸不着，甚至都有可能用不到，让人不禁感觉这是一个可有可无的东西。加上人的损失厌恶心理和只关注眼前事，总是感觉亏大了 从保险公司的角度保险公司首先是一个盈利性的组织，其次才是服务型的组织。那么既然要盈利肯定不会做亏本的买买，那么每卖给你的一份保险，他肯定要获利，但是获利的方式有很多，而且获利肯定从你的保费中来。到这里，大家肯定认为保险公司是一个黑心组织。对此先不做评判，继续往下分析 从代理人的角度代理人做着一份工作肯定是要有回报的，这份回报也是从你的保费当中来。而且为了更高的收益，代理人本能就会给你推荐跟多的保险。这样会让你感觉她就是要给你推销商品，而且还是一件看不见的商品，甚至可能还用不着 从自身的角度当我们年轻的时候，我们有的是活力，感觉未来充满希望，谁跟我说明天可能挂了，我不谢他祖宗都是客气的，着急享乐的时光，谁会考虑到那些不测，谁说多了，我跟他急 综上所述，保险就是一骗子啊！可是这只是我们的感觉，这事情可不能跟着感觉走。下面讨论下，怎么看待保险 我们应该怎样看待保险？ 保险是一种商品，一种服务 商品就会有性价比，所以买保险肯定买性价比高的 商品就会有目标人群，买合适自己的很重要 服务是体验到的，不是看见的 保险不是投资，是保障 不要想着用保险赚钱，哪怕是投资性质的保险也是，保险只是让你损失不会更多 今天和之前的事情，保险管不着，未来才是他的用武之地 保险保的是概率 概率一个很难去琢磨的事情，所以根据自己的情况去判断概率的大小 不要因为概率极小而忽略，也不要因为概率极大而害怕，很多事情还是可以通过技术手段来降低概率 我们要不要买保险？先说答案，是不一定非要买，而且不一定你能买。 不一定非要买刚说了保险的功能和性质，可以看出来，保险其实只适合一部分人。 老人是最适合买保险的，原因是性价比不高，大部分险种已经不适合了。但是这并不意味这老人不需要保障，只是保障方式不同了，可以利用储蓄或者稳健投资来保障。 小孩性价比最高，只需要一点点钱就能保证很多，可是由于技术发展，和通货膨胀，小孩不易买太多，合适就行 年轻人，最适合买保险的人，但是也是最不愿意买保险的人。原因是性价比高，收入能力强。但是考虑不到未来的风险 中年人，最尴尬的一群人，性价比已经不高了，但是是最急需的一部分人，原因是各方面压力都来了，风险越来越大。 想买不能买除了能买不买的，其实还有一些人想买可能都买不了，或者买了没用的。 如果你身体本身就很差，那么你的保费可是很高的哦，虽然也能保障，但是经济压力会过大，的不且过。当然土豪随意。 如果你从事危险职业，那么也很尴尬 其他的就不说了，还是有很多机会能买保险的 最后算个账保险其实是消费。但是不太一样的是，他能给你一个稳定的预期。最常说的例子就是，假如你收入 50 万，如果不出意外，你能剩下 50 万，如果出现意外你一分不剩。但是如果用 5 万块钱保险，就算出现意外，你也能留住 45 万。这就是保险的用处。 总结以前我不理解那些有钱人傻吗，为什么买保险，还买那么多的。一个稳定的预期是多么重要，你收获的是自由啊！要不然真是做事畏手畏脚。 当然保险的用处还有很多，还没弄清楚，以后慢慢了解吧。]]></content>
      <categories>
        <category>wake</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>保险</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漫谈996]]></title>
    <url>%2F996.html</url>
    <content type="text"><![CDATA[从 996.icu 出现之后，朋友圈陆续出现了很多关于此的文章，最先的都是同我一样打工的人们，慢慢的才是老板们的文章。连马云爸爸都被扯了出来，不过仔细观察下，两方的观点还是比较冲突的。 双方观点作为员工 剥削了他们的剩余价值 占用了他们的学习时间 对身体的损害 作为老板 为了员工的成长 自己以身作则，每天 12 小时的工作时间 我的观点如下： 首先资本是冷酷无情的，亲爹妈都不行的那种。 给员工最好的成长就是让他们赚到更多的名和利，如果都没有岂不扯淡 员工想学习，关键不在时间，而在态度，上班划水，下班娱乐的人大有人在 对身体的损害是不争的事实，老板和员工无一例外 怎么摆脱？我意淫的观点如下： 政府强制干预，因为我认为 996 的出现更多的像是军备竞赛，如果有公司不这样，很有可能就活不下去，如果员工不同意有可能被辞退，所以靠法律限制才是基础，这样大家才能公平竞争 提升效率，说的简单，其实很难，不光公司，个人同样需要提升效率。如果 7 天的活 1 天干完，谁还用 996。不过从我的经历我认为这点基本不可能。 无法摆脱？怎么适应？我的观点如下： 坚持学习，不只有业余时间可以学习，工作中也可以学习 学会理财，时间的缺失还是可以通过金钱来购买的，就像老板为什么雇佣员工，买的其实就是时间 锻炼身体，不管是不是 996，这点都没错 总结最后，生活不易，大家一起努力吧！不管现状如何，让世界更美好是我们共同追求的]]></content>
      <categories>
        <category>wake</category>
      </categories>
      <tags>
        <tag>成长</tag>
        <tag>996</tag>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年度总结]]></title>
    <url>%2Fthank2018.html</url>
    <content type="text"><![CDATA[2018 年度总结金钱不够，时间紧缺，稀缺永远都在 平稳心态，披荆斩棘，不变应对改变 读书使人进步 小小茶馆品人生百态 四世同堂看沧桑变化 黎明已来 烂片排山倒海，戏子假戏真做 小猫多管闲事，正义永不迟到 为人民服务 桑尼乘风破浪，梦想就在前方 意志代代相传，羁绊 没完没了 朵朵，奔奔跳跳，健健康康，打破沙锅 爸爸，走走停停，开开心心，契而不舍 无所畏惧 批评让人警醒，合作给人力量 朋友陪我经历，家人伴我成长 一路同行 2018 年丰富多彩，亮瞎狗眼 2019 年艰难困苦，锻炼身体 远离手机]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PS导出从模糊到清晰的图片 小波算法]]></title>
    <url>%2Fps-export-wavelet.html</url>
    <content type="text"><![CDATA[前端开发中遇到这种情况，页面的图片加载从上到下加载和由模糊到清晰加载，体验上来讲，肯定是后者爽了。那么图片怎么制作呢？ PNG图片使用PS导出时,勾选交错 jpg导出时,勾选连续]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vuex数据更新但页面没有刷新]]></title>
    <url>%2Fvuex-update-but-no-refresh-the-page.html</url>
    <content type="text"><![CDATA[vuex 数据更新但页面没有刷新再使用 vuex 的过程中经常遇到，数据虽然更新了，但是页面并没有更新，网上搜了一些解决办法并不能完全解决问题 原因由于 JavaScript 的限制， Vue 不能检测变动的数组 解决方案 官方推荐说如果是异步操作要使用action不用使用mutaion 网上推荐使用 watch 监听数据变化 如果上面两种都不行的话，可以尝试下下面的方案 经测试如果对象层级太深，却是不能及时刷新，但是如果是新对象的话就不会出现这种问题，那么每次重新赋值不久行了 😁 例如 1234// store.jsConst state = &#123; user:&#123;&#125;&#125; 123456789Const mutations = &#123; SET_USER(state,user)&#123; state.user = &#123; name:user.name &#125; // or state.user = cloneDeep(user) &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[前端面试题（答案）]]></title>
    <url>%2Finterview-questions.html</url>
    <content type="text"><![CDATA[前端面试题（答案）最近在招人,收集一些面试题 1. xhtml 和 html 有什么区别HTML 是一种基本的 WEB 网页设计语言，XHTML 是一个基于 XML 的置标语言 最主要的不同 无序列表项 0 无序列表项 1XHTML 元素必须被正确地嵌套 XHTML 元素必须被关闭 标签名必须用小写字母 XHTML 文档必须拥有根元素 2. 你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么? Ie(Ie 内核) 火狐（Gecko） 谷歌（webkit） opear(Presto) 3. 标签上 title 与 alt 属性的区别是什么? title是 global attributes 之一，用于为元素提供附加的 advisory information。通常当鼠标滑动到元素上的时候显示。 alt 是的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。 4. 描述 css reset 的作用和用途。Reset 重置浏览器的 css 默认属性 浏览器的品种不同，样式不同，然后重置，让他们统一 5. 清除浮动的几种方式，各自的优缺点 使用空标签清除浮动 clear:both（理论上能清楚任何标签，，，增加无意义的标签） 使用 overflow:auto（空标签元素清除浮动而不得不增加无意代码的弊端,,使用 zoom:1 用于兼容 IE） 是用 afert 伪元素清除浮动(用于非 IE 浏览器) 6. javascript 的 typeof 返回哪些数据类型 Object number function boolean underfind 7. split() join() 的区别前者是切割成数组的形式，后者是将数组转换成字符串 8. web 开发中会话跟踪的方法有哪些 cookie session url 重写 隐藏 input ip 地址 9. HTML 全局属性(global attribute)有哪些 accesskey:设置快捷键，提供快速访问元素如 aaa 在 windows 下的 firefox 中按 alt + shift + a 可激活元素 class:为元素设置类标识，多个类名用空格分开，CSS 和 javascript 可通过 class 属性获取元素 contenteditable: 指定元素内容是否可编辑 contextmenu: 自定义鼠标右键弹出菜单内容 data-*: 为元素增加自定义属性 dir: 设置元素文本方向 draggable: 设置元素是否可拖拽 dropzone: 设置元素拖放类型： copy, move, link hidden: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果 id: 元素 id，文档内唯一 lang: 元素内容的的语言 spellcheck: 是否启动拼写和语法检查 style: 行内 css 样式 tabindex: 设置元素可以获得焦点，通过 tab 可以导航 title: 元素相关的建议信息 translate: 元素和子孙节点内容是否需要本地化 10. HTTP method 一台服务器要与 HTTP1.1 兼容，只要为资源实现 GET 和 HEAD 方法即可 GET 是最常用的方法，通常用于请求服务器发送某个资源。 HEAD 与 GET 类似，但服务器在响应中值返回首部，不返回实体的主体部分 PUT 让服务器用请求的主体部分来创建一个由所请求的 URL 命名的新文档，或者，如果那个 URL 已经存在的话，就用干这个主体替代它 POST 起初是用来向服务器输入数据的。实际上，通常会用它来支持 HTML 的表单。表单中填好的数据通常会被送给服务器，然后由服务器将其发送到要去的地方。 TRACE 会在目的服务器端发起一个环回诊断，最后一站的服务器会弹回一个 TRACE 响应并在响应主体中携带它收到的原始请求报文。TRACE 方法主要用于诊断，用于验证请求是否如愿穿过了请求/响应链。 OPTIONS 方法请求 web 服务器告知其支持的各种功能。可以查询服务器支持哪些方法或者对某些特殊资源支持哪些方法。 DELETE 请求服务器删除请求 URL 指定的资源 11. 如何进行网站性能优化content 方面 减少 HTTP 请求：合并文件、CSS 精灵、inline Image 减少 DNS 查询：DNS 查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS 缓存、将资源分布到恰当数量的主机名，平衡并行下载和 DNS 查询 避免重定向：多余的中间访问 使 Ajax 可缓存 非必须组件延迟加载 未来所需组件预加载 减少 DOM 元素数量 将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量 减少 iframe 数量 不要 404 Server 方面 使用 CDN 添加 Expires 或者 Cache-Control 响应头 对组件使用 Gzip 压缩 配置 ETag Flush Buffer Early Ajax 使用 GET 进行请求 避免空 src 的 img 标签 Cookie 方面 减小 cookie 大小 引入资源的域名不要包含 cookie css 方面 将样式表放到页面顶部 不使用 CSS 表达式 使用不使用@import 不使用 IE 的 Filter Javascript 方面 将脚本放到页面底部 将 javascript 和 css 从外部引入 压缩 javascript 和 css 删除不需要的脚本 减少 DOM 访问 合理设计事件监听器 图片方面 优化图片：根据实际颜色需要选择色深、压缩 优化 css 精灵 不要在 HTML 中拉伸图片 保证 favicon.ico 小并且可缓存 移动方面 保证组件小于 25k Pack Components into a Multipart Document 12. 同源：两个文档同源需满足 协议相同 域名相同 端口相同 13. 跨域通信原因js 进行 DOM 操作、通信时如果目标与当前窗口不满足同源条件，浏览器为了安全会阻止跨域操作。跨域通信通常有以下方法 如果是 log 之类的简单单项通信，新建&lt;img&gt;,&lt;script&gt;,&lt;link&gt;,&lt;iframe&gt;元素，通过src，href属性设置为目标 url。实现跨域请求 如果请求 json 数据，使用&lt;script&gt;进行 jsonp 请求 现代浏览器中多窗口通信使用 HTML5 规范的targetWindow.postMessage(data, origin);其中 data 是需要发送的对象，origin 是目标窗口的 origin。window.addEventListener(&#39;message&#39;, handler, false);``handler的event.data是postMessage发送来的数据，event.origin是发送窗口的origin，event.source是发送消息的窗口引用 内部服务器代理请求跨域 url，然后返回数据 跨域请求数据，现代浏览器可使用 HTML5 规范的 CORS 功能，只要目标服务器返回 HTTP 头部Access-Control-Allow-Origin: *即可像普通 ajax 一样访问跨域资源 14. javascript 有哪几种数据类型六种基本数据类型 undefined null string boolean number symbol(ES6) 一种引用类型 Object 15.什么闭包,闭包有什么用闭包是在某个作用域内定义的函数，它可以访问这个作用域内的所有变量。 闭包作用域链通常包括三个部分： 函数本身作用域。 闭包定义时的作用域。 全局作用域。 闭包常见用途： 创建特权方法用于访问控制 事件处理程序及回调 16.javascript 有哪几种方法定义函数 函数声明表达式 function 操作符 Function 构造函数 ES6:arrow function 17. [“1”, “2”, “3”].map(parseInt)1234A. ["1", "2", “3"]B. [1, 2, 3]C. [0, 1, 2]D. other 你实际上得到的应该是[1, NaN, NaN]因为 parseInt 需要两个参数 (val, radix) 但 map 传了 3 个 (element, index, array) 18.[typeof null, null instanceof Object]1234A. ["object", false]B. [null, false]C. ["object", true]D. other typeof 对原生非可调用对象会始终返回 object 19. [ [3,2,1].reduce(Math.pow), [].reduce(Math.pow)] ]1234A. an errorB. [9, 0]C. [9, NaN]D. [9, undefined] 根据规范： 在一个空数组上应用reduce会抛初始化错误的异常 TypeError 20. 闭包123456789var name = 'World!';(function() &#123; if (typeof name === 'undefined') &#123; var name = 'Jack' console.log('Goodbye ' + name) &#125; else &#123; console.log('Hello ' + name) &#125;&#125;)() 1234A. Goodbye JackB. Hello JackC. Hello undefinedD. Hello World var 声明的作用域在整个 function 中, 但并没有初始化 21.1234var two = 0.2var one = 0.1var eight = 0.8var six = (0.6)[(two - one == one, eight - six == two)] 12;[true, true][(false, false)][(true, false)]other JavaScript 没有精确的数字, 即便它看上去有时侯能正常工作 22. 类型判断12345678910111213141516function showCase(value) &#123; switch(value) &#123; case 'A': console.log('Case A'); break; case 'B': console.log('Case B'); break; case undefined: console.log('undefined'); break; default: console.log('Do not know!'); &#125;&#125;showCase(new String(‘A')); 1234A. Case AB. Case BC. Do not know!D. undefined switch 使用 === 来枚举，并且 new String(x) !== x 23. 整数转换 进制转换123parseInt(3, 8)parseInt(3, 2)parseInt(3, 0) 1234A. 3, 3, 3B. 3, 3, NaNC. 3, NaN, NaND. other 3 在 2 进制中不存在, 很显然结果是NaN, 但 0 呢? parseInt 猜测你的意思是 10, 所有返回是 3. 24. Array.isArray( Array.prototype )1234A.trueB.falseC.errorD.other Array.prototype 是一个 Array. 25. 请将驼峰命名转为下划线命名(使用 ES6 写法)123456789var str = ’smallDog’ =&gt; ‘small_dog’const str = 'samllDog'const xt2xh = str =&gt; &#123; return str.replace(/([A-Z])/, ($1, $2) =&gt; &#123; return ['_', $2.toLocaleLowerCase()].join('') &#125;)&#125;console.log(xt2xh(str))]]></content>
  </entry>
  <entry>
    <title><![CDATA[Nginx无权限导致的403问题]]></title>
    <url>%2Fnginx-403.html</url>
    <content type="text"><![CDATA[每次新建服务器老是忘记，做个记录。 问题安装新的 Nginx 后，有可能网站会出现 404 无权限问题 原因Nginx 用户没有 root 权限 导致没有文件访问权限 解决办法修改nginx.conf 123user nginx;改为user root;]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>403</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html input="file" 浏览时只显示指定文件类型 xls、xlsx、csv[转]]]></title>
    <url>%2Fhtml-input-file-xls.html</url>
    <content type="text"><![CDATA[页面文件上传类型控制 事例： 1&lt;input id="fileSelect" type="file" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" /&gt; Valid Accept Types: For CSV files (.csv), use: 1&lt;input type=&quot;file&quot; accept=&quot;.csv&quot; /&gt; For Excel Files 2003-2007 (.xls), use: 1&lt;input type=&quot;file&quot; accept=&quot;application/vnd.ms-excel&quot; /&gt; For Excel Files 2010 (.xlsx), use: 1&lt;input type=&quot;file&quot; accept=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot; /&gt; For Text Files (.txt) use: 1&lt;input type=&quot;file&quot; accept=&quot;text/plain&quot; /&gt; For Image Files (.png/.jpg/etc), use: 1&lt;input type=&quot;file&quot; accept=&quot;image/*&quot; /&gt; For HTML Files (.htm,.html), use: 1&lt;input type=&quot;file&quot; accept=&quot;text/html&quot; /&gt; For Video Files (.avi, .mpg, .mpeg, .mp4), use: 1&lt;input type=&quot;file&quot; accept=&quot;video/*&quot; /&gt; For Audio Files (.mp3, .wav, etc), use: 1&lt;input type=&quot;file&quot; accept=&quot;audio/*&quot; /&gt; For PDF Files, use: 1&lt;input type=&quot;file&quot; accept=&quot;.pdf&quot; /&gt; NOTE:If you are trying to display Excel CSV files (.csv), do NOT use: text/csv application/csv text/comma-separated-values (works in Opera only). If you are trying to display a particular file type (for example, a WAV or PDF), then this will almost always work… 1&lt;input type=&quot;file&quot; accept=&quot;.FILETYPE&quot; /&gt; 原文： http://stackoverflow.com/questions/11832930/html-input-file-accept-attribute-file-type-csv]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>input</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx配置location总结及rewrite规则写法[转载]]]></title>
    <url>%2Fnginx-regex.html</url>
    <content type="text"><![CDATA[工作中经常会用到 nginx 服务,记录下常用的 nginx 配置 1. location 正则写法一个示例： 123456789101112131415161718192021222324252627282930313233343536373839404142location = / &#123; # 精确匹配 / ，主机名后面不能带任何字符串 [ configuration A ]&#125;location / &#123; # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求 # 但是正则和最长字符串会优先匹配 [ configuration B ]&#125;location /documents/ &#123; # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索 # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条 [ configuration C ]&#125;location ~ /documents/Abc &#123; # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索 # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条 [ configuration CC ]&#125;location ^~ /images/ &#123; # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。 [ configuration D ]&#125;location ~* \.(gif|jpg|jpeg)$ &#123; # 匹配所有以 gif,jpg或jpeg 结尾的请求 # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则 [ configuration E ]&#125;location /images/ &#123; # 字符匹配到 /images/，继续往下，会发现 ^~ 存在 [ configuration F ]&#125;location /images/abc &#123; # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在 # F与G的放置顺序是没有关系的 [ configuration G ]&#125;location ~ /images/abc/ &#123; # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用 [ configuration H ]&#125;location ~* /js/.*/\.js 已=开头表示精确匹配 如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。 ^~ 开头表示 uri 以某个常规字符串开头，不是正则匹配 ~ 开头表示区分大小写的正则匹配; ~* 开头表示不区分大小写的正则匹配 / 通用匹配, 如果没有其它匹配,任何请求都会匹配到 顺序 no 优先级：(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ,* 正则顺序) &gt; (location 部分起始路径) &gt; (/) 上面的匹配结果按照上面的 location 写法，以下的匹配示例成立： / -&gt; config A精确完全匹配，即使/index.html 也匹配不了 /downloads/download.html -&gt; config B匹配 B 以后，往下没有任何匹配，采用 B /images/1.gif -&gt; configuration D匹配到 F，往下匹配到 D，停止往下 /images/abc/def -&gt; config D最长匹配到 G，往下匹配 D，停止往下你可以看到 任何以/images/开头的都会匹配到 D 并停止，FG 写在这里是没有任何意义的，H 是永远轮不到的，这里只是为了说明匹配顺序 /documents/document.html -&gt; config C匹配到 C，往下没有任何匹配，采用 C /documents/1.jpg -&gt; configuration E匹配到 C，往下正则匹配到 E /documents/Abc.jpg -&gt; config CC最长匹配到 C，往下正则顺序匹配到 CC，不会往下到 E 实际使用建议123456789101112131415161718192021所以实际使用中，个人觉得至少有三个匹配规则定义，如下：#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。#这里是直接转发给后端应用服务器了，也可以是一个静态首页# 第一个必选规则location = / &#123; proxy_pass http://tomcat:8080/index&#125;# 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用location ^~ /static/ &#123; root /webroot/static/;&#125;location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123; root /webroot/res/;&#125;#第三个规则就是通用规则，用来转发动态请求到后端应用服务器#非静态文件请求就默认是动态请求，自己根据实际把握#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了location / &#123; proxy_pass http://tomcat:8080/&#125; http://tengine.taobao.org/book/chapter_02.htmlhttp://nginx.org/en/docs/http/ngx_http_rewrite_module.html 2. Rewrite 规则rewrite 功能就是，使用 nginx 提供的全局变量或自己设置的变量，结合正则表达式和标志位实现 url 重写以及重定向。rewrite 只能放在 server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 http://seanlook.com/a/we/index.php?id=1&amp;u=str 只对/a/we/index.php重写。语法rewrite regex replacement [flag]; 如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用 proxy_pass 反向代理。 表明看 rewrite 和 location 功能有点像，都能实现跳转，主要区别在于 rewrite 是在同一域名内更改获取资源的路径，而 location 是对一类路径做控制访问或反向代理，可以 proxy_pass 到其他机器。很多情况下 rewrite 也会写在 location 里，它们的执行顺序是： 执行 server 块的 rewrite 指令 执行 location 匹配 执行选定的 location 中的 rewrite 指令 如果其中某步 URI 被重写，则重新循环执行 1-3，直到找到真实存在的文件；循环超过 10 次，则返回 500 Internal Server Error 错误。 2.1 flag 标志位 last : 相当于 Apache 的[L]标记，表示完成 rewrite break : 停止执行当前虚拟主机的后续 rewrite 指令集 redirect : 返回 302 临时重定向，地址栏会显示跳转后的地址 permanent : 返回 301 永久重定向，地址栏会显示跳转后的地址 因为 301 和 302 不能简单的只返回状态码，还必须有重定向的 URL，这就是 return 指令无法返回 301,302 的原因了。这里 last 和 break 区别有点难以理解： last 一般写在 server 和 if 中，而 break 一般使用在 location 中 last 不终止重写后的 url 匹配，即新的 url 会再从 server 走一遍匹配流程，而 break 终止重写后的匹配 break 和 last 都能组织继续执行后面的 rewrite 指令 2.2 if 指令与全局变量if 判断指令语法为if(condition){...}，对给定的条件 condition 进行判断。如果为真，大括号内的 rewrite 指令将被执行，if 条件(conditon)可以是如下任何内容： 当表达式只是一个变量时，如果值为空或任何以 0 开头的字符串都会当做 false 直接比较变量和内容时，使用=或!= 正则表达式匹配，*不区分大小写的匹配，!~区分大小写的不匹配 -f和!-f用来判断是否存在文件-d和!-d用来判断是否存在目录-e和!-e用来判断是否存在文件或目录-x和!-x用来判断文件是否可执行 例如： 12345678910111213141516171819202122232425if ($http_user_agent ~ MSIE) &#123; rewrite ^(.*)$ /msie/$1 break;&#125; //如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &#123; set $id $1; &#125; //如果cookie匹配正则，设置变量$id等于正则引用部分if ($request_method = POST) &#123; return 405;&#125; //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302if ($slow) &#123; limit_rate 10k;&#125; //限速，$slow可以通过 set 指令设置if (!-f $request_filename)&#123; break; proxy_pass http://127.0.0.1;&#125; //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查if ($args ~ post=140)&#123; rewrite ^ http://example.com/ permanent;&#125; //如果query string中包含&quot;post=140&quot;，永久重定向到example.comlocation ~* \.(gif|jpg|png|swf|flv)$ &#123; valid_referers none blocked www.jefflei.com www.leizhenfang.com; if ($invalid_referer) &#123; return 404; &#125; //防盗链&#125; 全局变量下面是可以用作 if 判断的全局变量 $args： #这个变量等于请求行中的参数，同$query_string $content_length ： 请求头中的 Content-length 字段。 $content_type ： 请求头中的 Content-Type 字段。 $document_root ： 当前请求在 root 指令中指定的值。 $host ： 请求主机头字段，否则为服务器名称。 $http_user_agent ： 客户端 agent 信息 $http_cookie ： 客户端 cookie 信息 $limit_rate ： 这个变量可以限制连接速率。 $request_method ： 客户端请求的动作，通常为 GET 或 POST。 $remote_addr： 客户端的 IP 地址。 $remote_port ： 客户端的端口。 $remote_user ： 已经经过 Auth Basic Module 验证的用户名。 $request_filename ： 当前请求的文件路径，由 root 或 alias 指令与 URI 请求生成。 $scheme ： HTTP 方法（如 http，https）。 $server_protocol ： 请求使用的协议，通常是 HTTP/1.0 或 HTTP/1.1。 $server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。 $server_name ： 服务器名称。 $server_port ： 请求到达服务器的端口号。 $request_uri ： 包含请求参数的原始 URI，不包含主机名，如：”/foo/bar.php?arg=baz”。 $uri ： 不带请求参数的当前 URI，$uri 不包含主机名，如”/foo/bar.html”。 $document_uri ： 与$uri 相同。 例：http://localhost:88/test1/test2/test.php $host：localhost $server_port：88 $request_uri：http://localhost:88/test1/test2/test.php $document_uri：/test1/test2/test.php $document_root：/var/www/html $request_filename：/var/www/html/test1/test2/test.php 2.3 常用正则 . ： 匹配除换行符以外的任意字符 ? ： 重复 0 次或 1 次 ： 重复 1 次或更多次 ： 重复 0 次或更多次 \d ：匹配数字 ^ ： 匹配字符串的开始 $ ： 匹配字符串的介绍 {n} ： 重复 n 次 {n,} ： 重复 n 次或更多次 [c] ： 匹配单个字符 c [a-z] ： 匹配 a-z 小写字母的任意一个 小括号()之间匹配的内容，可以在后面通过$1来引用，$2 表示的是前面第二个()里的内容。正则里面容易让人困惑的是\转义特殊字符。 2.4 rewrite 实例例 1： 12345678910111213141516171819202122232425262728http &#123; # 定义image日志格式 log_format imagelog &apos;[$time_local] &apos; $image_file &apos; &apos; $image_type &apos; &apos; $body_bytes_sent &apos; &apos; $status; # 开启重写日志 rewrite_log on; server &#123; root /home/www; location / &#123; # 重写规则信息 error_log logs/rewrite.log notice; # 注意这里要用‘’单引号引起来，避免&#123;&#125; rewrite &apos;^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$&apos; /data?file=$3.$4; # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行 set $image_file $3; set $image_type $4; &#125; location /data &#123; # 指定针对图片的日志格式，来分析图片类型和大小 access_log logs/images.log mian; root /data/images; # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里 try_files /$arg_file /image404.html; &#125; location = /image404.html &#123; # 图片不存在返回特定的信息 return 404 &quot;image not found\n&quot;; &#125;&#125; 对形如/images/ef/uh7b3/test.png的请求，重写到/data?file=test.png，于是匹配到location /data，先看/data/images/test.png文件存不存在，如果存在则正常响应，如果不存在则重写 tryfiles 到新的 image404 location，直接返回 404 状态码。 例 2： 1rewrite ^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&amp;height=$3? last; 对形如/images/bla_500x400.jpg的文件请求，重写到/resizer/bla.jpg?width=500&amp;height=400地址，并会继续尝试匹配 location。 参考http://www.nginx.cn/216.htmlhttp://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/老僧系列 nginx 之 rewrite 规则快速上手http://fantefei.blog.51cto.com/2229719/919431]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017年度总结]]></title>
    <url>%2Fthank2017.html</url>
    <content type="text"><![CDATA[2017 年度总结看到很多大佬都会做一个年度总结，自己也跟下风吧 工作今年的工作算是平淡无奇，我自己也做了很多反思，从设计师转到前端也算有一定的时间了，我自己感觉还是菜鸟一枚。不过从接触越来越多的程序后，对我的思维有了一些变化。具体有以下这些 拆分具体任务说起来简单，实际做的时候才发现有多么困难，把一个目标拆分成多个小目标，再把小目标拆分，确实需要很多的知识，这里我还是凭经验，以后再做总结吧 不要想太多，动手去做做事的时候，我们经常想太多，做一下就知道了 学习今年订阅了得到的会员，也算是听了不少书，说实话对我的影响挺大的。 什么都不要相信知识是动态的，你今天相信的，明天就有可能被推翻，对事情多反问一下，也不容易上当受骗，尼玛，曾经被骗过 控制自己的情绪很多时候，我们的情绪能很大的影响我们，有好的，也有坏的。决策之前先冷静下来，可以避免很多错误。也能少吵很多架 如何教育孩子听了很多关于教育的书，我比较认同的有以下几点 个性化教育 鼓励代替批评，适当惩罚 母乳真的比奶粉好 多陪伴 多去看看外面的世界 让孩子自己来 培养兴趣很重要 生活宝宝快两岁了，非常可爱，自己感觉还是欠孩子太多，也很怕给她了错误的引导。家庭虽然有负担，但是还算美满 朋友对朋友的关注越来越少了，还是有些亏欠，过去的日子，朋友们给了非常多的帮助，很感谢大家，希望在新的一年大家越来越好 总结别的也想不起来了，就这么多吧，总之，酸甜苦辣，这一年算是过去了，希望新的一年，能够更加努力！加油！]]></content>
      <categories>
        <category>wake</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
        <tag>总结</tag>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2Fregex.html</url>
    <content type="text"><![CDATA[正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为 regex、regexp 或 RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。 基本写法 方式一：var reg = new RegExp(&#39;规则&#39;);方式二：var reg = /规则/; 常用类型 /pattern/attribute 参数attribute是一个可选字符串，常用属性有g和i g //全局匹配 i //区分大小写匹配 举例 var str = ‘My name is Dctxf,He is a boy!’; var reg = /dctxf/i; var reg2 =/is/g; str.match(reg); //返回[“Dctxf”] str.match(reg2); //返回[“is”, “is”] 常用方法 text() 验证字符串中是否存在某字符串，并返回一个boolean值。空格同样会被验证 //代码示例 var str = ‘my name is dctxf’; var reg = /dctxf/; //var reg = /md/; reg.test(str); //验证 str 里面是否存在 dctxf 返回 true //如验证 str 里面是否存在 yn 返回 false exec() 检索字符串中指定的值，并返回找到的值。若没有找到返回null var str = ‘my name is dctxf’; var reg = /dctxf/; reg.exec(str); //返回 dctxf 常用字符串正则方法 match() 匹配字符串中符合正则的字符串，并返回找到的字符 var str = ‘My name is dctxf’; var reg = /dctxf/; str.match(reg); //返回[“dctxf”] search() 搜索字符串中符合正则的字符串，并返回字符串位置 var str = ‘My name is dctxf’; var reg = /dctxf/; str.search(reg); //返回 11 replace() 搜索字符串中符合正则的字符串，并替换找到的字符串 var str = ‘My name is dctxf’; var reg = /dctxf/; str.replace(reg,’xiaofeng’); //返回”My name is xiaofeng” split() 搜索字符串中符合正则的字符串并按照此规则进行分割，然后返回分割后字符串组成的数组 var str = ‘My name is dctxf’; var reg = /\s/; // \s=’ ‘ 意思是空格 str.split(reg); //返回[“My”, “name”, “is”, “dctxf”] 常用正则 [0-9],[a-z]… 从＊到＊ var str = ‘My name is dctxf’; var reg = /[a-d]/g; //[a-d]的字符 str.match(reg); //返回[“a”, “d”, “c”] 衍生正则[0-9] //包含 0-9 [a-z] //包含 a-z [^0-9] //不包含 0-9 [^a-z] //不包含 a-z [abc] //包含 abc [^abc] //不包含 abc [abc|def|xyz] //包含 abc 或包含 def 或包含 xyz a.e查找单个字符串，除了换行和结束符 var str = ‘My name is dctxf, we are friend’; var reg = /a.e/g; str.match(reg); //返回[“ame”, “are”] 转义字符\s //空白字符（空格，tab，换行，回车） \S //非空白字符 \w //单词字符（字母，数字，下划线） \W //非单词字符 \d //数字 \D //非数字 \b //单词边界 \B //非单词边界 \n //换行符 n+ //包含至少一个 n 的字符串 n* //包含 0 或多个 n 的字符串 n? //包含 0 或一个 n 的字符串 n{x} //包含 x 个 n 的序列的字符串 n{x,y} //包含 x 或 y 个 n 的序列的字符串 n{x,} //包含至少 x 个 n 的序列的字符串 n$ //任何结尾为 n 的字符串 ^n //任何开头为 n 的字符串 常见正则 汉字 [\u4e00-\u9fa5] 手机号 1[0-9]{10} 邮箱 [\w!#$%&amp;’+/=?^_`{|}~-]+(?:.[\w!#$%&amp;’+/=?^`{|}~-]+)@(?:\w?.)+\w? 身份证 [1-9][0-9]{16}[0-9]|[1-9][0-9]{16}x$ 网址 [http://,https://][^\s]*]]></content>
  </entry>
  <entry>
    <title><![CDATA[一些心里话]]></title>
    <url>%2Ffor-family.html</url>
    <content type="text"><![CDATA[一些心里话想要说的东西太多，一篇文章不能表达所有的意思，更不能让你完全明白我想说的，希望能多思考一点 为什么要写这些东西生活越来越难，今后的生活会更难，这不是杞人忧天。如今感觉不到只不过就像温水煮青蛙，一点变热而已。写这些东西只是想你们有点思考，想想怎么改变，并一点点去改变。 家庭问题就目前来说家里的问题不少。当然这不是说是某个人的错，我把大家的毛病都写下来看看 我自己先说我自己吧，在处理家庭问题上，我是一直感觉我们应该是一家人，而不是仇人，应该没有比我们更亲的人。所以我的在处理家庭问题上也是尽量想把大家揉在一起，但是我发现我错了。 准确来说我们是 3 个或者 3 个以上的家庭，是一张结婚证把我们连在了一起，可是我们仍是 3 家人。 每个人的性格都不一样，想法，观念都有很大的不同，不应该揉在一起 我总是希望你们彼此理解对方，然后把你们的想法告诉对方，让对方去理解，可是结果总是坏的，因为我没考虑到，互相理解是很难的事情，甚至可能做不到 我爸爸我其实是挺佩服前半辈子的他的。可是后半辈子，他没了以前的那种冲劲，热情，他甚至也把自己看成了一个老头，我没到那个年纪可能我不能理解。但是我感觉人应该在精神上是没有年龄的。 固执，这世界上没有真理，总是坚持自己所谓的真理而蔑视其他人的想法 我是老子。我是你爸，我说你，我还打你呢。 我老了，干不动了，你让我干啥 我妈妈我妈真是无条件的爱我，可是真是这种爱，反而害了我跟小倩。我们从小懦弱，怕事。 一味的爱，可是爱不是解决问题的办法，人性天生懒得，贪婪，不断的施舍，只会换来不断的索取 不爱动脑子，总感觉没文化，不愿意多学习，一直都像个孩子，总是喜欢做自己喜欢的事情，不喜欢的事情就用各种理由推脱 我媳妇燕秋作为一个跟我们没有血缘关系人来到这个家庭，并与我组成新的家庭，其实是付出挺多的。可是她也总认为自己应该是个公主，总感觉我爱她就应该无限的宠她 只会享受生活，人生不止有生活，而且也不可能只有生活 自制力差，不爱动脑筋 为什么要改变 社会的发展趋势，我们必须往上爬，不仅仅是经济上的 如今的家庭问题很多也是经济上的问题 为了自己老了不用麻烦孩子 为了孩子能有好的未来 为什么不用害怕改变改变是一件很痛苦的事情，任何人都不喜欢改变，这是人性所致，我们无法改变。但是改变又是一件确定的事情，所以我们只是做一件确定的事情。 钱的问题其实不是很大的问题。就现在来说，咱们的那点钱根本算不上什么钱。如果没了也就没了，握在手里也是没了。 怎么改变 打工肯定不是出路，就目前来看咱们家这么多的闲人，靠打工，根本支撑不了，这不是省钱能解决的，只能增加收入，所以我一直说让做生意，至于怎么做具体再说 改变有很大的风险，跟做生意一样。怎么降低风险才是关键。只有不停的学习，学习各种知识，而不是局限在目前的知识面前 必须抛弃目前家里的矛盾，作为一家人总在这里内耗，外人看了笑话，自己伤了身体 信念坚定，不是说一定能成功，可是至少得认为我们一定能成功 各司其职，各尽其才，其实每个人都有优点只要发挥自己的优点就行，缺点尽量避免他，做好自己的事情，提意见跟指手画脚只有一线之隔]]></content>
  </entry>
  <entry>
    <title><![CDATA[一些有用的工具]]></title>
    <url>%2Ftools.html</url>
    <content type="text"><![CDATA[工作中经常会有一些用到的工具，这里做个收集 npm 版权信息生成 generate-license]]></content>
  </entry>
  <entry>
    <title><![CDATA[Git推送某个目录到分支]]></title>
    <url>%2Fgit-push-some-folder-to-subtree.html</url>
    <content type="text"><![CDATA[很多 GIT 平台都支持静态页面展示功能，但是项目中到静态页面都是自动生成的，如何利用 pages 功能来展示静态页面呢？我的做法如下。 步骤 生成静态页面到dist目录 推送dist目录到dist分支 给dist分支开启pages 具体操作生成dist目录及文件，运用git subtree推送到dist分支 1git subtree push --prefix dist origin dist 拓展阅读 用 Git Subtree 在多个 Git 项目间双向同步子项目，附简明使用手册]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HTML5 head 头标签[转][改]]]></title>
    <url>%2Fhtml5-head-tag.html</url>
    <content type="text"><![CDATA[原文我做了修改，想看原文的，地址在文章最下面。没想到会有这么多的东西。吃?啊！ META&lt;meta&gt;元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。 &lt;meta&gt;标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联的名称/值对。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;!-- 声明文档使用的字符编码 --&gt;&lt;meta charset="utf-8" /&gt;&lt;!-- 让IE浏览器以最新的模式渲染页面 --&gt;&lt;meta http-equiv="x-ua-compatible" content="ie=edge" /&gt;&lt;!--移动端的页面这个可以忽略，具体可以查看本文Internet Explorer浏览器部分--&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;&lt;!-- 以上 3 个 meta 标签 *必须* 放在 head 的最前面；其他任何的 head 内容必须在这些标签的 *后面* --&gt;&lt;!-- 允许控制资源的过度加载 --&gt;&lt;meta http-equiv="Content-Security-Policy" content="default-src 'self'" /&gt;&lt;!-- 尽早地放置在文档中 --&gt;&lt;!-- 仅应用于该标签下的内容 --&gt;&lt;!-- Web 应用的名称（仅当网站被用作为一个应用时才使用）--&gt;&lt;meta name="application-name" content="应用名称" /&gt;&lt;!-- 针对页面的简短描述（限制 150 字符）--&gt;&lt;!-- 在*某些*情况下，该描述是被用作搜索结果展示片段的一部分 --&gt;&lt;meta name="description" content="一个页面描述" /&gt;&lt;!-- 控制搜索引擎的抓取和索引行为 --&gt;&lt;meta name="robots" content="index,follow,noodp" /&gt;&lt;!-- 所有的搜索引擎 --&gt;&lt;meta name="googlebot" content="index,follow" /&gt;&lt;!-- 仅对 Google 有效 --&gt;&lt;!-- 告诉 Google 不显示网站链接的搜索框 --&gt;&lt;meta name="google" content="nositelinkssearchbox" /&gt;&lt;!-- 告诉 Google 不提供此页面的翻译 --&gt;&lt;meta name="google" content="notranslate" /&gt;&lt;!-- 验证 Google 搜索控制台的所有权 --&gt;&lt;meta name="google-site-verification" content="verification_token" /&gt;&lt;!-- 用来命名软件或用于构建网页（如 - WordPress、Dreamweaver）--&gt;&lt;meta name="generator" content="program" /&gt;&lt;!-- 关于你的网站主题的简短描述 --&gt;&lt;meta name="subject" content="你的网站主题" /&gt;&lt;!-- 非常简短（少于 10 个字）的描述。主要用于学术论文。--&gt;&lt;meta name="abstract" content="" /&gt;&lt;!-- 完整的域名或网址 --&gt;&lt;meta name="url" content="https://example.com/" /&gt;&lt;meta name="directory" content="submission" /&gt;&lt;!-- 基于网站内容给出一般的年龄分级 --&gt;&lt;meta name="rating" content="General" /&gt;&lt;!-- 允许控制 referrer 信息如何传递 --&gt;&lt;meta name="referrer" content="never" /&gt;&lt;!-- 禁用自动检测和格式化可能的电话号码 --&gt;&lt;meta name="format-detection" content="telephone=no" /&gt;&lt;!-- 通过设置为 “off” 完全退出 DNS 预取 --&gt;&lt;meta http-equiv="x-dns-prefetch-control" content="off" /&gt;&lt;!-- 在客户端存储 cookie，web 浏览器的客户端识别 --&gt;&lt;meta http-equiv="set-cookie" content="name=value; expires=date; path=url" /&gt;&lt;!-- 指定要显示在一个特定框架中的页面 --&gt;&lt;meta http-equiv="Window-Target" content="_value" /&gt;&lt;!-- 地理标签 --&gt;&lt;meta name="ICBM" content="latitude, longitude" /&gt;&lt;meta name="geo.position" content="latitude;longitude" /&gt;&lt;!-- 国家代码 (ISO 3166-1): 强制性, 州代码 (ISO 3166-2): 可选; 如 content="US" / content="US-NY" --&gt;&lt;meta name="geo.region" content="country[-state]" /&gt;&lt;!-- 如 content="New York City" --&gt;&lt;meta name="geo.placename" content="city/town" /&gt; DOCTYPE12&lt;!DOCTYPE html&gt;&lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt; DOCTYPE(Document Type)，该声明位于文档中最前面的位置，处于 html 标签之前，此标签告知浏览器文档使用哪种 HTML 或者 XHTML 规范。 声明必须是 HTML 文档的第一行 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。 在 HTML 4.01 中，&lt;!DOCTYPE&gt; 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。 HTML5 不基于 SGML，所以不需要引用 DTD。 请始终向 HTML 文档添加 &lt;!DOCTYPE&gt; 声明，这样浏览器才能获知文档类型。 LANG123&lt;html lang="en"&gt; ...&lt;/html&gt; 更加标准的 lang 属性写法 http://zhi.hu/XyIa viewport1&lt;meta name="viewport" content="initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no" /&gt; width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边(http://bigc.at/ios-webapp-viewport-meta.orz) content 参数： width viewport 宽度(数值/device-width) height viewport 高度(数值/device-height) initial-scale 初始缩放比例 maximum-scale 最大缩放比例 minimum-scale 最小缩放比例 user-scalable 是否允许用户缩放(yes/no) minimal-ui iOS 7.1 beta 2 中新增属性（注意：iOS8 中已经删除），可以在页面加载时最小化上下状态栏。这是一个布尔值，可以直接这样写： 1&lt;meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui" /&gt; 而如果你的网站不是响应式的，请不要使用 initial-scale 或者禁用缩放。 适配 iPhone 6 和 iPhone 6plus 则需要写：1&lt;meta name="viewport" content="width=375" /&gt; &lt;meta name="viewport" content="width=414" /&gt; 大部分 4.7~5 寸的安卓设备的 viewport 宽设为 360px，iPhone 6 上却是 375px，大部分 5.5 寸安卓机器（比如说三星 Note）的 viewport 宽为 400，iPhone 6 plus 上是 414px。 SEO 优化部分123456789101112131415161718&lt;!-- 页面标题标签(head 头部必须) --&gt;&lt;title&gt;your title&lt;/title&gt;&lt;!--页面关键词 keywords--&gt;&lt;meta name="keywords" content="your keywords" /&gt;&lt;!--页面描述内容 description--&gt;&lt;meta name="description" content="your description" /&gt;&lt;!--定义网页作者 author--&gt;&lt;meta name="author" content="author,email address" /&gt;&lt;!--定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。--&gt;&lt;meta name="robots" content="index,follow" /&gt;&lt;!--百度禁止转码--&gt;&lt;!--通过百度手机打开网页时，百度可能会对你的网页进行转码，脱下你的衣服，往你的身上贴狗皮膏药的广告，为此可在 head 内添加--&gt;&lt;meta http-equiv="Cache-Control" content="no-siteapp" /&gt; 不推荐的 meta 属性下面是不推荐使用的 meta 属性，因为它们采用率低，或已弃用： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!-- 用于声明文档语言，但支持得不是很好。最好使用 &lt;html lang=""&gt; --&gt;&lt;meta name="language" content="en" /&gt;&lt;!-- Google 无视 &amp; Bing 认为垃圾的指示器 --&gt;&lt;meta name="keywords" content="你,关键字,在这里,不使用空格,而用逗号进行分隔" /&gt;&lt;!-- 目前没有在任何搜索引擎中使用过的声明 --&gt;&lt;meta name="revised" content="Sunday, July 18th, 2010, 5:15 pm" /&gt;&lt;!-- 为垃圾邮件机器人收获 email 地址提供了一种简单的方式 --&gt;&lt;meta name="reply-to" content="email@example.com" /&gt;&lt;!-- 最好使用 &lt;link rel="author"&gt; 或 humans.txt 文件 --&gt;&lt;meta name="author" content="name, email@example.com" /&gt;&lt;meta name="designer" content="" /&gt;&lt;meta name="owner" content="" /&gt;&lt;!-- 告诉搜索机器人一段时间后重新访问该网页。这不支持，因为大多数搜索引擎使用随机时间间隔来重新抓取网页 --&gt;&lt;meta name="revisit-after" content="7 days" /&gt;&lt;!-- 在一段时间后将用户重定向到新的 URL --&gt;&lt;!-- W3C 建议不要使用该标签。Google 建议使用服务器端的 301 重定向。--&gt;&lt;meta http-equiv="refresh" content="300; url=https://example.com/" /&gt;&lt;!-- 描述网站的主题 --&gt;&lt;meta name="topic" content="" /&gt;&lt;!-- 公司概要或网站目的 --&gt;&lt;meta name="summary" content="" /&gt;&lt;!-- 一个已废弃的标签，和关键词 meta 标签的作用相同 --&gt;&lt;meta name="classification" content="business" /&gt;&lt;!-- 是否是相同的 URL，年代久远且不支持 --&gt;&lt;meta name="identifier-URL" content="https://example.com/" /&gt;&lt;!-- 和关键词标签类似的功能 --&gt;&lt;meta name="category" content="" /&gt;&lt;!-- 确保你的网站在所有国家和语言中都能显示 --&gt;&lt;meta name="coverage" content="Worldwide" /&gt;&lt;!-- 和 coverage 标签相同 --&gt;&lt;meta name="distribution" content="Global" /&gt;&lt;!-- 控制在互联网上哪些用户可以访问 --&gt;&lt;meta http-equiv="Pics-label" content="value" /&gt;&lt;!-- 缓存控制 --&gt;&lt;!-- 最好在服务器端配置缓存控制 --&gt;&lt;meta http-equiv="Expires" content="0" /&gt;&lt;meta http-equiv="Pragma" content="no-cache" /&gt;&lt;meta http-equiv="Cache-Control" content="no-cache" /&gt; link&lt;link&gt; 标签定义文档与外部资源的关系。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;!-- 有助于防止出现内容重复的问题 --&gt;&lt;link rel="canonical" href="https://example.com/2010/06/9-things-to-do-before-entering-social-media.html" /&gt;&lt;!-- 之前用于包含 icon 链接，但已被废弃并不再使用 --&gt;&lt;link rel="shortlink" href="https://example.com/?p=42" /&gt;&lt;!-- 链接到当前文档的一个 AMP HTML 版本 --&gt;&lt;link rel="amphtml" href="https://example.com/path/to/amp-version.html" /&gt;&lt;!-- 表明一个 CSS 样式表 --&gt;&lt;link rel="stylesheet" href="https://example.com/styles.css" /&gt;&lt;!-- 链接到一个指定 Web 应用程序“安装”证书的 JSON 文件 --&gt;&lt;link rel="manifest" href="manifest.json" /&gt;&lt;!-- 链接到文档的作者 --&gt;&lt;link rel="author" href="humans.txt" /&gt;&lt;!-- 指向一个适用于链接内容的版权申明 --&gt;&lt;link rel="copyright" href="copyright.html" /&gt;&lt;!-- 给出可能的你的另一种语言的文档位置参考 --&gt;&lt;link rel="alternate" href="https://es.example.com/" hreflang="es" /&gt;&lt;!-- 提供了关于作者或其他人的信息 --&gt;&lt;link rel="me" href="https://google.com/profiles/thenextweb" type="text/html" /&gt;&lt;link rel="me" href="mailto:name@example.com" /&gt;&lt;link rel="me" href="sms:+15035550125" /&gt;&lt;!-- 链接到一个文档，包含当前文档的一个归档链接 --&gt;&lt;link rel="archives" href="https://example.com/2003/05/" title="May 2003" /&gt;&lt;!-- 链接到层次结构中的顶级资源 --&gt;&lt;link rel="index" href="https://example.com/" title="DeWitt Clinton" /&gt;&lt;!-- 给出该文档的起点 --&gt;&lt;link rel="start" href="https://example.com/photos/pattern_recognition_1_about/" title="Pattern Recognition 1" /&gt;&lt;!-- 引导当前文档的前述资源序列 --&gt;&lt;link rel="prev" href="https://example.com/opensearch/opensearch-and-openid-a-sure-way-to-get-my-attention/" title="OpenSearch and OpenID? A sure way to get my attention." /&gt;&lt;!-- 给出一个自我参考 - 当文档有多个可能的参考时非常有用 --&gt;&lt;link rel="self" type="application/atom+xml" href="https://example.com/atomFeed.php?page=3" /&gt;&lt;!-- 分别是在一系列文件中的第一个、下一个、上一个和最后一个 --&gt;&lt;link rel="first" href="https://example.com/atomFeed.php" /&gt;&lt;link rel="next" href="https://example.com/atomFeed.php?page=4" /&gt;&lt;link rel="previous" href="https://example.com/atomFeed.php?page=2" /&gt;&lt;link rel="last" href="https://example.com/atomFeed.php?page=147" /&gt;&lt;!-- 当使用第三方服务来维护 blog 时使用 --&gt;&lt;link rel="EditURI" href="https://example.com/xmlrpc.php?rsd" type="application/rsd+xml" title="RSD" /&gt;&lt;!-- 当另一个 WordPress 博客链接到你的 WordPress 博客或文章时形成一个自动化的评论 --&gt;&lt;link rel="pingback" href="https://example.com/xmlrpc.php" /&gt;&lt;!-- 当你在自己的页面上链接到一个 url 时通知它 --&gt;&lt;link rel="webmention" href="https://example.com/webmention" /&gt;&lt;!-- 加载一个外部的 HTML 文件到当前 HTML 文件中 --&gt;&lt;link rel="import" href="component.html" /&gt;&lt;!-- 打开搜索 --&gt;&lt;link rel="search" href="/open-search.xml" type="application/opensearchdescription+xml" title="Search Title" /&gt;&lt;!-- Feeds --&gt;&lt;link rel="alternate" href="https://feeds.feedburner.com/example" type="application/rss+xml" title="RSS" /&gt;&lt;link rel="alternate" href="https://example.com/feed.atom" type="application/atom+xml" title="Atom 0.3" /&gt;&lt;!-- 预取，预载，预浏览 --&gt;&lt;link rel="dns-prefetch" href="//example.com/" /&gt;&lt;link rel="preconnect" href="https://www.example.com/" /&gt;&lt;link rel="prefetch" href="https://www.example.com/" /&gt;&lt;link rel="prerender" href="https://example.com/" /&gt;&lt;link rel="preload" href="image.png" as="image" /&gt;&lt;!-- 更多信息：https://css-tricks.com/prefetching-preloading-prebrowsing/ --&gt;具体说明查看：https://css-tricks.com/prefetching-preloading-prebrowsing/&lt;!-- 添加 RSS 订阅 --&gt;&lt;link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml" /&gt;&lt;!----&gt; 不推荐的 link 标签1234&lt;link rel=&quot;shortcut icon&quot; href=&quot;path/to/favicon.ico&quot;&gt;&lt;!-- 没有用的, 专有的和错误的, 详见 https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/Y_2eFRh9BOs/gULYapoRBwAJ --&gt;&lt;link rel=&quot;subresource&quot; href=&quot;styles.css&quot;&gt; 具体说明查看：https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/Y_2eFRh9BOs/gULYapoRBwAJ favicon 图标123456&lt;!-- IE 11, Chrome, Firefox, Safari, Opera支持&lt;link&gt;形式设置：--&gt;&lt;link rel="icon" href="path/to/favicon-16.png" sizes="16x16" type="image/png" /&gt;&lt;link rel="icon" href="path/to/favicon-32.png" sizes="32x32" type="image/png" /&gt;&lt;link rel="icon" href="path/to/favicon-48.png" sizes="48x48" type="image/png" /&gt;&lt;link rel="icon" href="path/to/favicon-62.png" sizes="62x62" type="image/png" /&gt;&lt;link rel="icon" href="path/to/favicon-192.png" sizes="192x192" type="image/png" /&gt; 注意：对于 IE 10 及以下版本不支持形式设置，只通过将命名为 favicon.ico 的文件放置在网站根目录中实现。 浏览器及平台详细说明QQ 浏览器（X5 内核）QQ 浏览器（X5 内核）同样适用于微信，QQ 等第三方应用页面开发。 123456&lt;!-- 设置锁定横屏、竖屏显示模式，portrait（横屏），landscape（竖屏）--&gt;&lt;meta name="x5-orientation" content="portrait|landscape" /&gt;&lt;!-- 设置全屏显示页面 --&gt;&lt;meta name="x5-fullscreen" content="true" /&gt;&lt;!-- 开启页面以应用模式显示（全屏显示等） --&gt;&lt;meta name="x5-page-mode" content="app" /&gt; 360 浏览器设置 360 浏览器渲染模式：webkit 为极速内核，ie-comp 为 IE 兼容内核，ie-stand 为 IE 标准内核。 12345&lt;meta name="renderer" content="webkit|ie-comp|ie-stand" /&gt;详情文档链接：浏览器内核控制Meta标签说明文档 360 浏览器就会在读取到这个标签后，立即切换对应的极速核。 另外为了保险起见再加入&lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1" /&gt;这样写可以达到的效果是如果安装了 Google Chrome Frame，则使用 GCF 来渲染页面，如果没有安装 GCF，则使用最高版本的 IE 内核进行渲染。 UC 浏览器1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!--设置屏幕方向--&gt;portrait 为横屏，landscape 为竖屏。&lt;meta name="screen-orientation" content="portrait|landscape" /&gt;&lt;!--设置全屏--&gt;&lt;meta name="full-screen" content="yes" /&gt;&lt;!--设置适应屏幕排版（缩放是否显示滚动条）--&gt;&lt;!--UC 浏览器在标准排版效果实现的基础上，提供适应屏幕的排版方式，当设置为 `uc-fitscreen=yes`，页面进行缩放操作时，仅放大图片和文字等元素，但不放大屏幕宽度，保持不出现水平（横向）滚动条。--&gt;&lt;meta name="viewport" content="uc-fitscreen=no|yes" /&gt;&lt;!--排版模式--&gt;&lt;!--UC 浏览器提供两种排版模式，分别是适屏模式（fitscreen）及标准模式（standard），其中适屏模式简化了一些页面的处理，使得页面内容更适合进行页面阅读、节省流量及响应更快，而标准模式则能按照标准规范对页面进行排版及渲染。--&gt;&lt;meta name="layoutmode" content="fitscreen|standard" /&gt;&lt;!--夜间模式--&gt;&lt;!--可以帮助用户在低亮度或黑暗情况下更舒适的进行页面浏览。由于基于网页的应用愈加复杂，由浏览器实现的单一夜间模式不一定能够适应所有情况(例如游戏应用)，因此 UC 浏览器允许网页设计者对其设计的页面禁用浏览器的夜间模式，自行设计更适合用户使用的夜间模式。--&gt;注意：页面内的 frame/iframe 中的夜间模式的 meta 不生效。&lt;meta name="nightmode" content="enable|disable" /&gt;&lt;!--整页图片强制显示--&gt;&lt;!--为了节省流量及加快速度，UC 为用户提供了无图模式，在实际使用中存在页面中的图片是不可缺少的，例如验证码，地图等。通过强制图片显示的功能可以保证图片显示不受用户的设置影响。--&gt;注意：整页图片强制显示仅对当前页面生效，对页面内的 frame/iframe 不生效，也不影响前进后退的页面&lt;meta name="imagemode" content="force" /&gt;&lt;!--开启应用模式--&gt;&lt;meta name="browsermode" content="application" /&gt;&lt;!--应用模式是为方便 Web 应用及游戏开发者设置的综合开关，通过meta标签进行指示打开，当进入应用模式时，浏览器将自动调整以下参数:--&gt;&lt;!--参数 状态 说明--&gt;&lt;!--全屏 生效 可通过 meta 或 JS API 调用退出全屏--&gt;&lt;!--长按菜单 失效 可通过 JS API 调用重新生效--&gt;&lt;!--浏览器默认手势 失效 可通过 JS API 调用重新生效--&gt;&lt;!--排版模式 标准模式 可通过 meta 或 JS API 调用设置其他排版模式--&gt;&lt;!--强制图片显示 生效 /--&gt;&lt;!--夜间模式 失效 可通过 meta 或 JS API 调用启用夜间模式--&gt;&lt;!--缩放字体--&gt;例如：禁用的 UC 浏览器的字体缩放功能&lt;meta name="wap-font-scale" content="no" /&gt; 具体 UC 浏览器文档链接：UC 浏览器文档 Apple iOS 原生浏览器12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!--添加智能 App 广告条--&gt;&lt;!--告诉浏览器这个网站对应的app，并在页面上显示下载banner，需要注意的是Smart App Banners标签不能用在frame框架内部，否则不起作用。--&gt;&lt;!--其中app-id(必须), affiliate-data (可选), app-argument (可选)--&gt;&lt;meta name="apple-itunes-app" content="app-id=APP_ID,affiliate-data=AFFILIATE_ID,app-argument=SOME_TEXT" /&gt;&lt;!--例如Digg的写法：--&gt;&lt;meta name="apple-itunes-app" content="app-id=362872995, affiliate-data=bevbOqLt02I, app-argument=digg://" /&gt;&lt;!--忽略数字自动识别为电话号码--&gt;&lt;meta name="format-detection" content="telephone=no" /&gt;&lt;!--启用 WebApp 全屏模式--&gt;&lt;meta name="apple-mobile-web-app-capable" content="yes" /&gt;&lt;!--添加到主屏后设置状态栏的背景颜色--&gt;&lt;meta name="apple-mobile-web-app-status-bar-style" content="black" /&gt;&lt;!--只有在 “apple-mobile-web-app-capable” content=”yes” 时生效。--&gt;&lt;!--如果设置为 default 或 black ，网页内容从状态栏底部开始。--&gt;&lt;!--如果设置为 black-translucent ，网页内容充满整个屏幕，顶部会被状态栏遮挡。--&gt;&lt;!--添加到主屏后的标题（iOS 6 新增）--&gt;&lt;meta name="apple-mobile-web-app-title" content="App Title" /&gt;&lt;!--iOS 图标--&gt;&lt;!--图片自动处理成圆角和高光等效果。--&gt;&lt;link rel="apple-touch-icon" href="path/to/apple-touch-icon.png" /&gt;&lt;!--禁止系统自动添加效果，直接显示设计原图。--&gt;&lt;link rel="apple-touch-icon-precomposed" href="path/to/apple-touch-icon-precomposed.png" /&gt;&lt;!--iOS 8+ 不再支持 precomposed, 只有 apple-touch-icon 是必须的--&gt;&lt;!--在大多数情况下，在head中一个180×180px的图标就足够了。如果您想要由设备确定的唯一图标，请使用不同大小的图标。--&gt;&lt;link rel="apple-touch-icon" sizes="57x57" href="path/to/icon@57.png" /&gt;&lt;link rel="apple-touch-icon" sizes="72x72" href="path/to/icon@72.png" /&gt;&lt;link rel="apple-touch-icon" sizes="114x114" href="path/to/icon@114.png" /&gt;&lt;link rel="apple-touch-icon" sizes="144x144" href="path/to/icon@144.png" /&gt;&lt;!--启动画面 ( 不赞成使用 )--&gt;&lt;!--iPad 的启动画面是不包括状态栏区域的，iPhone 和 iPod touch 的启动画面是包含状态栏区域的--&gt;&lt;link rel="apple-touch-startup-image" href="path/to/startup.png" /&gt;&lt;!--具体描述设置请查看http://www.css88.com/archives/5480中相应的说明。--&gt;&lt;!--iOS 应用深度链接--&gt;&lt;meta name="apple-itunes-app" content="app-id=APP-ID, app-argument=http/url-sample.com" /&gt;&lt;link rel="alternate" href="ios-app://APP-ID/http/url-sample.com" /&gt; Google Android 原生浏览器1234567891011121314&lt;!--标签页选项卡颜色--&gt;&lt;!--Android Lollipop 中的 Chrome 39 增加 theme-color meta 标签，用来控制选项卡颜色。--&gt;&lt;!--http://updates.html5rocks.com/2014/11/Support-for-theme-color-in-Chrome-39-for-Android--&gt;&lt;meta name="theme-color" content="#db5945" /&gt;&lt;!--添加到主屏--&gt;&lt;meta name="mobile-web-app-capable" content="yes" /&gt;&lt;!--详细链接: https://developer.chrome.com/multidevice/android/installtohomescreen--&gt;&lt;!--安卓应用深度链接（网页上唤起应用）--&gt;&lt;!-- Android app deep linking --&gt;&lt;meta name="google-play-app" content="app-id=package-name" /&gt;&lt;link rel="alternate" href="android-app://package-name/http/url-sample.com" /&gt;**注：貌似没测试成功，如果你知道如何正确设置，欢迎留言斧正。** Apple Safari 浏览器Safari 10 开始支持固定书签页的 SVG favicons 了，你可以这样使用： 12&lt;!-- Pinned Site --&gt;&lt;link rel=&quot;mask-icon&quot; href=&quot;path/to/icon.svg&quot; color=&quot;red&quot;&gt; 扩展阅读：https://yoast.com/dev-blog/safari-pinned-tab-icon-mask-icon/ Google Chrome 浏览器12345&lt;!--关闭chrome浏览器下翻译插件--&gt;&lt;meta name=&quot;google&quot; value=&quot;notranslate&quot; /&gt;&lt;!--chrome浏览器插件安装--&gt;&lt;link rel=&quot;chrome-webstore-item&quot; href=&quot;https://chrome.google.com/webstore/detail/APP_ID&quot;&gt; 具体使用，请查看：Using Inline Installation Google Chrome Mobile (只针对 Android)从 Chrome 31 开始，你可以设置你的 Web 应用为“app mode”，如 Safari。 12345678910111213&lt;!-- 链接到一个 manifest 并定义 manifest 的元数据。--&gt;&lt;!-- manifest.json 中的例子也可以通过以下链接找到。--&gt;&lt;link rel=&quot;manifest&quot; href=&quot;manifest.json&quot;&gt;&lt;!-- 定义你的网页为 Web 应用 --&gt;&lt;meta name=&quot;mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;&lt;!-- 第一个是官方推荐格式。--&gt;&lt;link rel=&quot;icon&quot; sizes=&quot;192x192&quot; href=&quot;nice-highres.png&quot;&gt;&lt;link rel=&quot;icon&quot; sizes=&quot;128x128&quot; href=&quot;niceicon.png&quot;&gt;&lt;!-- 所有带 apple 前缀的格式已废弃，所以不要使用它们。--&gt;&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;128x128&quot; href=&quot;niceicon.png&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;128x128&quot; href=&quot;niceicon.png&quot;&gt; Internet Explorer 浏览器1234567&lt;!--模式设置--&gt;&lt;!--IE8以下以IE7标准模式呈现网页，而IE9则以IE9的标准模式呈现网页：--&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7; IE=EmulateIE9" /&gt;&lt;!--如果安装了GCF，则使用GCF来渲染页面（"chrome=1"）--&gt;&lt;!--如果没有安装GCF，则使用最高版本的IE内核进行渲染（"IE=edge"）--&gt;&lt;meta http-equiv="x-ua-compatible" content="ie=edge" /&gt; GCF（Google Chrome Frame ）相关链接：https://www.chromium.org/developers/how-tos/chrome-frame-getting-startedX-UA-Compatible 相关链接：https://blogs.msdn.microsoft.com/ie/2010/06/16/ies-compatibility-features-for-site-developers/ win8,win10 下的一些设置12345678910111213141516171819202122232425262728293031323334html 代码:&lt;meta http-equiv="cleartype" content="on" /&gt;&lt;meta name="skype_toolbar" content="skype_toolbar_parser_compatible" /&gt;&lt;!-- Disable link highlighting on IE 10 on Windows Phone 具体说明查看：https://blogs.windows.com/buildingapps/2012/11/15/adapting-your-webkit-optimized-site-for-internet-explorer-10/--&gt;&lt;meta name="msapplication-tap-highlight" content="no" /&gt;&lt;!-- Pinned sites具体说明查看：https://msdn.microsoft.com/en-us/library/dn255024(v=vs.85).aspx--&gt;&lt;meta name="application-name" content="Contoso Pinned Site Caption" /&gt;&lt;meta name="msapplication-tooltip" content="Example Tooltip Text" /&gt;&lt;meta name="msapplication-starturl" content="/" /&gt;&lt;meta name="msapplication-config" content="http://example.com/browserconfig.xml" /&gt;&lt;meta name="msapplication-allowDomainApiCalls" content="true" /&gt;&lt;meta name="msapplication-allowDomainMetaTags" content="true" /&gt;&lt;meta name="msapplication-badge" content="frequency=30; polling-uri=http://example.com/id45453245/polling.xml" /&gt;&lt;meta name="msapplication-navbutton-color" content="#FF3300" /&gt;&lt;meta name="msapplication-notification" content="frequency=60;polling-uri=http://example.com/livetile" /&gt;&lt;meta name="msapplication-square150x150logo" content="path/to/logo.png" /&gt;&lt;meta name="msapplication-square310x310logo" content="path/to/largelogo.png" /&gt;&lt;meta name="msapplication-square70x70logo" content="path/to/tinylogo.png" /&gt;&lt;meta name="msapplication-wide310x150logo" content="path/to/widelogo.png" /&gt;&lt;meta name="msapplication-task" content="name=Check Order Status;action-uri=./orderStatus.aspx?src=IE9;icon-uri=./favicon.ico" /&gt;&lt;meta name="msapplication-task-separator" content="1" /&gt;//Windows 8 磁贴颜色&lt;meta name="msapplication-TileColor" content="#FF3300" /&gt;//Windows 8 磁贴图标&lt;meta name="msapplication-TileImage" content="path/to/tileimage.jpg" /&gt;&lt;meta name="msapplication-window" content="width=1024;height=768" /&gt; APP 链接1234567891011&lt;!-- iOS --&gt;&lt;meta property="al:ios:url" content="applinks://docs" /&gt;&lt;meta property="al:ios:app_store_id" content="12345" /&gt;&lt;meta property="al:ios:app_name" content="App Links" /&gt;&lt;!-- Android --&gt;&lt;meta property="al:android:url" content="applinks://docs" /&gt;&lt;meta property="al:android:app_name" content="App Links" /&gt;&lt;meta property="al:android:package" content="org.applinks" /&gt;&lt;!-- Web Fallback --&gt;&lt;meta property="al:web:url" content="http://applinks.org/documentation" /&gt;&lt;!-- More info: http://applinks.org/documentation/ --&gt; 具体请查看：App Links Docs 原文地址http://www.css88.com/archives/6410]]></content>
  </entry>
  <entry>
    <title><![CDATA[看奇葩说的一些感想?]]></title>
    <url>%2Fbb-idea.html</url>
    <content type="text"><![CDATA[奇葩说是一个辩论节目，当然，我不是一个辩手，这里只是我看到这些辩题的时候一些我自己的想法。可能会体现出我的价值观，我其实不想在别人面前体现我的价值观的，因为我不知道我的是不是对的，甚至我有时候都感觉自己变态。希望有人看到能给我一些建议或者意见吧！！！ 被误会要不要澄清我个人是不喜欢澄清的，就像节目里面的如晶。一部分是因为害怕，一部分感觉解释的无力，浪费时间，浪费精力。 节目里罗振宇老师说在公司中应该勇于澄清，勇于沟通，他的公司就提倡这种文化。马东老师也说不是所有公司都是那样，更多的是没法沟通的公司，我的公司恰好就是（好惨）。毕竟现实情况各有各的不同，选择合适的方法很重要。 澄清真的很重要，可是不需要澄清的世界不是很美好吗？我向往那样的世界。 十年后不在一起还追吗这道题我的第一反应就是追！！！理由很简单，我不信命，不信天！ 相爱为什么要考虑那么多，为什么不是努力在一起，反抗命运！虽然很宅，但是不代表我希望被命运支配。 没有上进心我错了吗这期讲的什么记不起来了，就题来看，我认为没错。这是个人意志和选择。一点错都没有。我甚至羡慕这些人，他们可以无忧无虑，开开心心。可是不是所有都这样，你想与世隔绝，可是发现就在尘世。 剩男剩女该差不多得了不谈心理，我不知道他们的想法，我只知道我希望爱别人，我也希望被爱，我不想单着。但是追求理想对象，想法不错，目的错了。我们总在要求别人，包括生活中的自己，为什么我不能成为别人眼中理想对象？ 一键定制孩子的完美人生这题我非常认同一个观点，这是父母的决定，父母爱孩子，超过爱自己。我会按。因为我爱孩子，而爱又很自私。 在职场要不要当邀功精我本人不反对邀功，但是我反对不说事实。我的底线就是你自己可以随心所欲，但是不能伤害别人。 生活的暴击值得感激吗这期我感触最深的就是不记得谁说的那句话，我们真的想长大想成熟吗？为什么我们会有意无意的伤害别人？ 帮爱人一键恢复记忆吗我要恢复的理由是，一个人如果没有了记忆，还算是他自己吗？而且现实是就算你帮他恢复，总会恢复，到时候会更痛苦。 给走头有路的人捐款蠢吗我是没捐，而且提到捐款，我有一段不是很美好的回忆。所以后来我也不喜欢用捐钱来做所谓的善事。因为我并没有想要彻底解决人家所面临的问题。甚至我们还给了他们一个逃避现实的理由。 婚礼真的有必要吗对我们有必要，对别人没必要。婚礼的意义我想应该是爱的见证，跟别人无关。 不靠谱的梦想该劝阻吗我不喜欢劝阻，因为我不知道是对是错。我想我会做的就是列出我所知道的利弊，至于要不要坚持，我相信他会判断。但是是我自己的梦想的话，我想我会坚持！如果不坚持梦想还有什么意义？！世界和平！！！ 父母提出住养老院支持吗这题我感觉非常伤感，我不知道是不是社会的进步。今后会有很多的孤寡老人，而我们却什么也做不了。这是社会进步的象征吗？我表示怀疑 得高等生物的蛋该毁灭吗看电影降临，我想很适合这题。人类可以说绝大多数希望把外星人赶出地球，而外星人什么都还没做。只有女主角一个人选择去接触，去理解他们。我想高等生物应该不只有缺点吧？如果人类进化会把文明给进化没了，我想还不如变成猴子。 遇险伴侣逃跑原谅吗其实这题原谅不原谅都是一个原因就是，爱。我是不会，因为这时候她需要我。 和老板打电动该放水吗和老板打过电动，没考虑过放水，因为都是一群菜逼。看人吧，别让穿小鞋就行。 分手该不该当面说这题也是蛋疼，好像换个方式就不会痛一样。没什么观点，喜欢就好。 不给别人添麻烦是美德吗我个人是非到外不得已不喜欢给人添麻烦。因为不打扰别人，是我一直坚持的，不知道对错！ 外卖小哥惹毛我投诉吗我想这题应该和上面那个谣言的一起看。投诉可以，但是公司不能因为一个投诉就去罚款，开除。目前被投诉的理由也是很奇葩。商业社会越是底层越是受伤，而且没有反抗的力量。我以前是不喜欢给差评的，可是我发现不给差评，有很多人或者企业真的一点都不反省，难道这世界真的是弱肉强食？那我们和纳粹有何区别？ 奋斗城市污染严重走吗这题我很想说的是罗老师的一个观点，就是经济发展，必定会带来环境污染，难道为了解决环境污染，就放弃经济发展？ 我想说，不试试怎么知道不能同时进行？就算是，能不能不给那些做坏事的人一个那么看似正当的理由？ 是你会不会做单身妈妈我想这题很好看，会不会和想不想是两回事。我不知道会不会，但是我绝对不想。每个人需要的都是爱和被爱。]]></content>
      <categories>
        <category>wake</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[几本书的一些感想]]></title>
    <url>%2Fsome-ideas.html</url>
    <content type="text"><![CDATA[以前读书也没什么记录，读了就读了，时间长了，都忘的的差不多了。感觉还是记录一下比较好。下面这几本趁还有一些印象就简单记录一下，如果以后有机会，把里面好的一些再重读一下。 过的刚好郭德纲的自传过的刚好。整书整体给人感觉一般，前半段主要叙述了郭德纲前半段人生的一些经历。确实很是坎坷，后半段却是像一些气话。虽然书中所说他本人不在乎别人怎么说他，但是别人对他的态度他却记忆清晰。说实话感觉好像没有忘记。 不过，大师也是人，他能有今天的成就，不得不说有很多过人之处。还是很值得学习的。 重新定义公司这本书我感觉很值得推荐。 书中把谷歌公司的很多价值观和做法描写的很详细。给人一种开拓眼界的感觉。盲目自大不是明智的做法，谷歌也犯过同样的错误，不过它能够很理智的面对问题，解决问题，并且始终怀疑当前的最优做法。这点我相信很多人或公司都能做到。希望有空能重读一遍，或许理论已经不适用，但是想法很值得借鉴。 万历十五年这本书是电视人民的名义中多次提到的书。这本书给我的感觉就是真的很难读（可能是我的文化关系）。书中记录明朝的那些事情，让我有以下一些想法 任何时代都不缺想做事的人，但是由于时代的局限性，很多人并不得志 任何过激的观点都会成为你实现理想的阻碍 制度对整个体系的重要性，好的制度能让坏人做好事，坏的制度能让好人做坏事 书中确实蕴含许多道理，能静下心的人可以读读。 罗辑思维：我懂你的知识焦虑这本书真的是罗辑思维节目的文字版啊！！！感觉真是坑爹。如果想了解书中的内容，还是看看罗辑思维的视频节目吧，生动有趣。 人性的弱点这本书在鸡汤届真是一本好书。书中讲了很多做人做事的道理，对人生真是有不少的启发。相比其他鸡汤类的文章，本书不光鼓励你，还给你列出了具体的方法，书中基本都是现实中的小故事。让本书不那么乏味。如果你感觉对人生，对自己有什么不满，不妨看看，多点正能量！加油！！！]]></content>
      <categories>
        <category>wake</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[nginx内置变量 大全[转]]]></title>
    <url>%2Fnginx-variable.html</url>
    <content type="text"><![CDATA[最近在配置 nginx 代理 Google analytics 的时候用到了 nginx 变量，于是在网上搜了一下，发现了这篇文章，就转了过来，不过当中有些不是很清楚，等到用到的时候再补充，这里先做备份了。原文地址在文章最下面。 nginx 内置变量内置变量存放在ngx_http_core_module模块中，变量的命名方式和 apache 服务器变量是一致的。总而言之，这些变量代表着客户端请求头的内容，例如$http_user_agent, $http_cookie, 等等。下面是 nginx 支持的所有内置变量： $arg_name请求中的的参数名，即“?”后面的arg_name=arg_value形式的arg_name $args请求中的参数值 $binary_remote_addr客户端地址的二进制形式, 固定长度为 4 个字节 $body_bytes_sent传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的“%B”参数保持兼容 $bytes_sent传输给客户端的字节数 (1.3.8, 1.2.5) $connectionTCP 连接的序列号 (1.3.8, 1.2.5) $connection_requestsTCP 连接当前的请求数量 (1.3.8, 1.2.5) $content_lengthContent-Length 请求头字段 $content_typeContent-Type 请求头字段 $cookie_namecookie 名称 $document_root当前请求的文档根目录或别名 $document_uri同 $uri $host优先级如下：HTTP 请求行的主机名 &gt; ”HOST”请求头字段 &gt; 符合请求的服务器名 $hostname主机名 $http_name匹配任意请求头字段； 变量名中的后半部分“name”可以替换成任意请求头字段，如在配置文件中需要获取 http 请求头：“Accept-Language”，那么将“－”替换为下划线，大写字母替换为小写，形如：$http_accept_language即可。 $https如果开启了 SSL 安全模式，值为“on”，否则为空字符串。 $is_args如果请求中有参数，值为“?”，否则为空字符串。 $limit_rate用于设置响应的速度限制，详见 limit_rate。 $msec当前的 Unix 时间戳 (1.3.9, 1.2.6) $nginx_versionnginx 版本 $pid工作进程的 PID $pipe如果请求来自管道通信，值为“p”，否则为“.” (1.3.12, 1.2.7) $proxy_protocol_addr获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串。(1.5.12) $query_string同 $args $realpath_root当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径。 $remote_addr客户端地址 $remote_port客户端端口 $remote_user用于 HTTP 基础认证服务的用户名 $request代表客户端的请求地址 $request_body客户端的请求主体 此变量可在location中使用，将请求主体通过proxy_pass, fastcgi_pass, uwsgi_pass, 和 scgi_pass传递给下一级的代理服务器。 $request_body_file将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置 client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置 12345proxy_pass_request_body off;fastcgi_pass_request_body off;uwsgi_pass_request_body off;//orscgi_pass_request_body off; $request_completion如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空。 $request_filename当前连接请求的文件路径，由 root 或 alias 指令与 URI 请求生成。 $request_length请求的长度 (包括请求的地址, http 请求头和请求主体) (1.3.12, 1.2.7) $request_methodHTTP 请求方法，通常为“GET”或“POST” $request_time处理客户端请求使用的时间 (1.3.9, 1.2.6); 从读取客户端的第一个字节开始计时。 $request_uri这个变量等于包含一些客户端请求参数的原始 URI，它无法修改，请查看$uri 更改或重写 URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”。 $scheme请求使用的 Web 协议, “http” 或 “https” $sent_http_name可以设置任意 http 响应头字段； 变量名中的后半部分“name”可以替换成任意响应头字段，如需要设置响应头 Content-length，那么将“－”替换为下划线，大写字母替换为小写，形如：$sent_http_content_length 4096即可。 $server_addr服务器端地址，需要注意的是：为了避免访问 linux 系统内核，应将 ip 地址提前设置在配置文件中。 $server_name服务器名 $server_port服务器端口 $server_protocol服务器的 HTTP 版本, 通常为 “HTTP/1.0” 或 “HTTP/1.1” $statusHTTP 响应代码 (1.3.2, 1.2.2) $tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space客户端 TCP 连接的具体信息 $time_iso8601服务器时间的 ISO 8610 格式 (1.3.12, 1.2.7) $time_local服务器时间（LOG Format 格式） (1.3.12, 1.2.7) $uri请求中的当前 URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用 index 指令进行修改，$uri 不包含主机名，如”/foo/bar.html”。 原文 http://www.cnphp.info/nginx-embedded-variables-lasted-version.html?utm_source=tuicool&amp;utm_medium=referral]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[负能量鸡汤段子 给自己一点启发]]></title>
    <url>%2Fnegative-energy-happy.html</url>
    <content type="text"><![CDATA[之前看到这些负能量的鸡汤段子，对自己挺有启发的。如果你承受能力有限，就不要看了。现实很残酷，前途很光明！ 段子正文 又一天过去了。今天过得怎么样，梦想是不是更远了？ 只要是石头，到哪里都不会发光的。 我有位家境一般的朋友，一直觉得如果自己有钱一定会更幸福。后来他妈做婴幼教育发财了。快十年后我见他，问：现在你倒是有钱了，你真的幸福吗？他回答：爽翻啦！我默默地走开了。 4.只有能力强会被当成纯技术人员；而光会社交拍马又会被认为没有真才实学；所以，要想在单位中脱颖而出，最重要的是有关系。 5.我发现没有任何一个煤矿工人靠挖煤多又快当上了煤老板。 6.我有个朋友，在几年前停止了抱怨和自怨自艾，开始努力改变自己。到今天，他的物质生活和精神状态都没有什么改善。 7.很多时候，乐观的态度和好听的话帮不了你。 8.回首青春，我发现自己失去了很多宝贵的东西。但我并不难过，因为我知道，以后会失去的更多。 9.秋天是收获的季节。别人的收获是成功与快乐，你的收获是认识到并不是每个人都会成功与快乐。 父母一直注重对我的品德教育。到了社会上，我按照父母教我的接人待物，却发现自己并不受人待见。 最靠得住的是金钱，最靠不住的是人心。 对今天解决不了的事情，也不必着急。因为明天还是解决不了。 青年靠什么混日子？头等青年靠出身，二等青年靠关系，三等青年靠天资，四等青年靠努力，五等青年耍文艺，六等青年打游戏，穷游，看美剧。 每次看到穷游日志的感受都是：那么穷就别 TM 出去浪了。 “不去努力然后告诉自己我根本就不想要”的痛苦，比“拼命努力后失败”的痛苦，要小得多。 没有钱包的充实，哪来内心的宁静。很多人都本末倒置了。 一些年轻人通过美剧. 旅游和 Youtube 视频拥有了朴素的自由民主和人权观念；他们觉得自己工作烂，人缘差，没对象，都是中国的体制害的。 你只需看着别人精彩，老天对你另有安排。 普通人一生的四个阶段：心比天高的无知快乐与希望——愧不如人后的奋斗与煎熬——毫无回报的愤懑与失望——坦然的平凡和颓废。你走到哪一步了？ 大部分成功靠得既不是厚积薄发的努力，也不是戏剧化的机遇，而是早就定好的出身和天赋。 小孩问富翁：叔叔为什么你这么有钱呢？富翁说：我给你讲个故事吧。很小的时候，我注意到楼下的矿泉水卖一块钱，而三站地外的篮球场上，要卖一块五。我拿着一个大书包，从楼下买水带到球场去卖，卖一块二。一个月我挣了十块钱。小孩说：我好像明白了。富翁说：你明白个屁。后来我爸死了，把钱留给我了。 “为什么我总是感觉自己特别普通？”“可能是因为你确实比较普通吧。” 很多人不是心理疾病，而是心理残疾，治不好的。 我发现很多混得不好的人看得都很开。也不知道他们是因为看得透彻而不屑于世俗的成功，还是因为不成功而不得不看得开。 除了有钱人，世上还有两种人：其一是省吃俭用买奢侈品装逼，其二是省吃俭用也买不起奢侈品的。 一场说走就走的旅行归来后，除了该做的事情被拖延的更久了，什么都没有改变。 你努力后的成功，不能弥补你成功前的痛苦。 假如今天生活欺骗了你，不要悲伤，不要哭泣，因为明天生活还会继续欺骗你。 要是有个地方能出卖自己的灵魂换取物质享受就好了。 好身材的因素很多。不是节食和锻炼就能拥有好身材的。 每天显得无聊或寂寞了，去找朋友一起吃饭和逛，只不过是为了满足自己与人交往的需求，算不上是社交。 优秀的女生在脆弱的时候(比如分手，工作不如意)，会需要比平时更多的关爱，于是会和更多的人交流。如果她在恢复正常后，回到了自己原来的圈子，不再理你，请你不要奇怪。 朋友，那不是懒，懒是可以克服的。你只是脑子比较弱(笨)，没办法长时间经受高强度的思考，去搞逻辑太复杂的东西和处理太多的信息量。 有些年轻人，一毕业就到某些大型国企和机关中工作。每天没什么事儿，就是吃饭喝酒，福利好得不得了。人生还没有奋斗过就开始养老，自己的理想被丢在一旁，用民脂民膏来享受特权。对于这样的年轻人，我只想问你们四个字：哪投简历？ 所有抱怨社会不公和制度的人翻译过来只有一句话：请给我金钱，女人和社会地位。 常听到别人说：我希望他/她有什么话当面说，不要在别后中伤人。一些人信以为真，而实际上，我的实践证明，当面说别人坏话，别人会非常愤怒，难堪。所以中伤别人一定要在背后。 其实找谁做女朋友都差不多，都是在不停地争吵。只不过一些人是和比较漂亮的女孩子在争吵。 爱情开始时都差不多。但当两个人平淡到左手牵右手时，是加班挤地铁还房贷然后给他农村父母寄钱假期在屋里大眼瞪小眼，还是开小车朝九晚五住大房子周末采购装点自己的小家出国旅游，区别就非常大了。 坏女人爱男人的钱和权；好女人爱男人因有钱和有权儿产生的自信. 宽大. 精力充沛. 乐观进取。还好，殊途同归。 精神追求应当是物质追求得到满足后的自然反应。而不是在现实受挫后去寻求的安慰剂。 我的梦想就是一手拿着相机，一手拉着你，四处旅行。每天日落时的歇脚处都是我们的家。然后在三十多岁的时候还在初级职位上拿着微薄的薪水，和刚毕业的年轻人一起被呼来喝去。 那些能够彼此帮忙托关系的友谊，比那些天天在一起就是扯淡吃喝旅游的友谊，要强得多。 一些人追求卓越是因为他们天性如此，且能力出众。很多其他人却也喜欢跟着凑热闹。 那些人人羡慕的精英，其实过得并不如你想象的那样好。但肯定比你是强得多。 幸亏当事者迷，不然真的看清事实真相，很多人是承受不来的。 没钱没事业的人，才有时间去提高自己的人生境界。 年轻时总是缺乏对自己的正确认识。时而觉得自己能力超群，海阔天空，时而觉得一无是处，平凡无能。长大后，经历得多了，逐渐认清自己，才发现自己原来是一无是处，平凡无能。 成语造句：很多年轻人想要从工作中找寻快乐和人生的意义，真是缘木求鱼。 路上看到两个长得不好看也看起来很穷的男女热吻。我说两个物质生活质量很差的人，彼此相伴。朋友立刻反驳我：物质生活质量不行就不会幸福吗？他们如此相爱，比那些有钱又美但离婚的名人强多了！我说我根本没说他们不幸福呀，你努力反驳的，可能是你自己内心的声音吧。 社会学家研究表明：难看和没钱的男人，并不比高帅富更加靠谱。 普通人结婚的另一半其实并不欣赏自己，只不过找不到更好的人。他们真正欣赏喜欢的，另有其人。 爱情就是，如果没有更好的选择了，我才陪你到天荒地老。 他给你的爱会消逝，他给你的 TIFFANY 却不会贬值。 我问过很多女大学生这个问题：出国旅游和用名牌，真的这么重要吗？第一种回答是：不重要，但男朋友愿意而且能够给我买，很重要。第二种回答是：对啊，很重要啊！ 错把放纵当潇洒，把颓废当自由，把逃避责任当做追求自我价值。不过是懒，怕吃苦，哪来那么多好听的理由。 有些女生觉得说自己是吃货能显得可爱，其实并没有这样的效果。 女生的冷暖自知什么的，在长得好看面前弱爆了。 一些女生在背后议论长得美家境好的女生，说对方生活轻浮，道德不高。她们说得有根有据，也很有道理，但听起来总是显得酸溜溜的。 我有一些漂亮又受过教育的姐妹，本来有机会嫁给官富二代，但很多被那些长得不错. 有名校高学历. 刚毕业在知名外企工作. 加班到很晚还健身的男生所吸引。觉得人家上进又有潜力。五六年后，她们悔得肠子都青了。 我大学宿舍的一个女生，每天要花半个小时拌狗粮拿到外面去喂流浪狗。可她半个月才给家里打一次电话。她家是三线城市的工薪阶层。同学们都说她是爱心小天使。 几年前 BBS 有女生写道：不知为什么，每次有丑男看我，我都感觉他很猥琐，特别反感；但帅哥看我就感觉很好。今日又看到有男生写：我发现我老是喜欢抢着给漂亮的女生帮忙，不自觉地就会问她需要什么；但每次丑女让我帮忙，我就感觉：你自己不会干吗？——一些很明显的实话说出来，显得格外可爱。 美国人的生活就是像你在电影电视剧看的那样好。天天玩儿，随便搞搞就挣大钱，到处都是感人的细节，帅哥美女随便搞。导演们把这些日常生活拍下来，送到电视台电影院播放。 口中的道德和原则虽然重要，却总是要给手里的利益让道。 一提到钱，大家就不是那么亲热了。 你这么努力，忍受那么多寂寞和纠结，我们也没觉得你有多优秀。 人生就是这样，有欢笑也有泪水。一部分人主要负责欢笑，另一部分人主要负责泪水。 很多人不断地规划自己的人生，每天压力很大。其实不管你怎么过。都会后悔的。想想你这前几十年就明白了。 三十岁时，大部分人都卡在初级职位上。现有的工作升不上去，又无法承担转行的时间成本，更来不及再去读书。父母开始多病；自己收入有限，也没有存款。更大的痛苦，是看到身边没有背景但努力又聪明的人已经小有成就，有背景的人已经开始过上贵族生活了。 这个世界没有错，谁让你长得不好看又没钱。 有些妹子喜欢带上墨镜自拍。其实再戴上口罩，会显得更美。 多照照镜子，很多事情你就明白原因了。 我从来不会脑残地在网上晒自己买的名牌，因为我买不起。 小时候以为有钱人都很跋扈，心都是黑的。长大后才发现，很多有钱人都懂得很多，经历很丰富，做事儿很认真，为人很宽厚，理性，比穷人更好相处。 长相不行的人，为人也未必好。只不过由于长久寂寞的折磨，有时会发疯似地对人好。 26 岁的他辞掉工作，和朋友建了支乐队，到各民办大学演出，反响平淡。30 岁钱花完了，父亲得病要很多钱。“唱完这场就放弃，青春就到这里了。”甘肃七里河大学演唱会前，他留下眼泪说。一位女学生递上纸条：我喜欢你的歌，要坚持梦想。他把纸条攥紧决定坚持梦想。34 岁，他欠了十几万的债，父亲也病逝了。 “老师您好，请问像我这样的，没有背景的北大毕业生应该如何定位自己？”“社会底层群众中受教育程度最高的一批人。” 如果你每天干的活明显多于别人，但自己很高兴还感觉得到器重，那么与其说你很有才干，不如说你的领导很会管人。 当别人和你说忙，是他/她要留时间给更重要的人。 “那些出身好能力强的人努力是为了成功，因为人家有可能会成功。我们努力是为了啥呢？”“为了活下去。” 基因是你给的，成长环境是你给的，社会阶层是你给的——还有脸埋怨自己孩子没出息。 有些人努力了一辈子，就是从社会的四流挤入了三流。 弱者都是这样，觉得生活中的无奈太多，自己又无力改变。 学术能力的缺乏并不意味着你就擅长混社会，说不定还不如在学校的表现。 你全力做到的最好，可能还不如别人随便搞搞。 如果你知道一些事情有意思，但不能去做而失落，那还好；要是觉得什么都没意思，应该就是抑郁症。 我要是有钱或者长得好看就好了。那样，即使我性格有点儿怪，也会有人愿意倾听我的想法和感受，跟我做朋友。 出身不好的限制也不光是平台问题。出身不好，说明你父母混的也不怎么样，也许你基因里就写着“不行”两个字。 经过十年的不断奋斗和磨砺，我终于从一个懵懂无知. 敏感脆弱的少年，成长为了一个懵懂无知. 敏感脆弱的青年。 为什么有些人要把追求精神满足和追求物质上的富足对立起来呢？你不幸福是因为你境界不高，你物质生活差是因为你能力不行。这完全是两回事儿。 成败是评判英雄的唯一标准。 优秀幸福的人是喜欢撒娇的，告诉别人自己这儿过得不好，那儿过得也不好。有些人当真的了，觉得别人天天是在宝马车中哭泣。 如果外貌好能够获得他人的关注，又有钱能够支持各种娱乐活动，谁会愿意每天呆在家里打游戏，刷微博，看电视剧。 如果你很忙，除了你真的很重要以外，更可能的原因是：你很弱，你没有什么更好的事情去做，你生活太差不得不努力来弥补，或者你装作很忙，让自己显得很重要。——史蒂夫·乔布斯 很难想象让敏感多变的年轻人去做 Leader，进行重大的决策。这些人睡一觉起来，被别人说了几句，或者吃了顿好饭，人生观世界观就可以发生翻天覆地的变化。 尽量不要和比自己生活质量高的人起冲突，不论你是假装若无其事. 努力争辩或者破口大骂，在别人看来，都是自己很可笑并且已经输了。 有些人，社交能力很差。只能和那些志同道合，彼此欣赏的人做朋友。而那些性格不随和，不喜欢自己，但是能给自己带来提升的人，他们没有能力搞定。 老板和领导很清楚哪些人能够得到晋升。对于那些不能的人，他们也会不断地鼓励和给她们希望。 以前每次看到网上的青年在微博校内大谈国事，我担心他们会干出些什么事情来。后来我发现他们还同时说着“明天一定要早起”，“这个假期要多看几本书”，“再也不能多吃了”，于是我放心了。 一些人的情商比较低，没法扮演好自己的社会角色，只能一直以最真实的自己面对世界。 人生的自由和无限可能性都是错觉。每个人都被社会压力，亲近的人和自己束缚的死死的，每天做着自己一定会去做的事情。 社会精英阶层一边啃着心灵鸡腿和心灵鸡胸，一边为我们送上了心灵鸡汤，说人生的价值并不在于你挣了多少钱和外在是否美。 出卖自己的灵魂和原则并不丢人，丢人的是没能卖一个好价钱。 我们所咒骂的那些品德败坏的人，其实不过是直接或间接地损害了我们的利益。 直到三十岁才知道，和不同的人说不同的话，表现出不一样的态度，是一种非常可贵的能力，而不是虚伪。 别减肥了，你丑不仅是因为胖。 有些人感慨：“自己岁数不小了，还没有成熟起来。”其实你们已经成熟起来了，你们成熟起来就这样。 只有拥有找男女朋友的能力和很多备胎，才能真正享受单身生活。 女生们宁肯做高帅富的备胎，也不肯接受屌丝的行为，从基因上保证了人类的进步。 Loser 面对生活比自己好的人，心中生出了怨恨。 我去找心理医生看抑郁症。他听完我的陈述，说道：如果你说的都真的话，为什么你不去自杀呢？你这不是抑郁症；抑郁症是看事情悲观，本来好，却认为不行。你是本来就过得不如别人。 很多人发现自己在钱. 权. 女人的问题上比不过别人，于是开始试着在道德和人生境界上做文章。 碰到一个认识的人，想一起聊聊天。她说自己去香港和希腊玩了，又买了苹果和化妆品；我不知道怎么回应，因为我很久没有出去玩和买东西了。我又说我最近思考了人为什么活着和出身的问题，她也沉默，因为很久没有思考这样的问题。此后再也无话。 我追逐自己的梦想，别人说我幼稚可笑，但我坚持了下来。最后发现，原来还真是我以前幼稚可笑。 你年轻时一事无成；时而自怨自艾颓废堕落，时而咬紧牙关拼命努力，经营关系，但你的生活一直没有改善，你一直很痛苦，直到三十岁。”他听后兴奋地问：那三十岁之后呢？有转机吗？算命先生微微抬起头：三十岁后……你就开始习惯了。 很同情那些名校毕业生。这些人中的绝大多数，一生最大的成就就是高考的成功，一下超越了社会中的各种阶层，仿佛升到顶端。之后一辈子都在走下坡路。 哪怕抛掉出身的因素，我觉得你也未必干得过别人。 吹牛逼是一些人的天性。当对于一些话题自己乏善可陈时，就会搬弄外援：我有个朋友，拥有比你们更牛逼的经历。讲完后洋洋得意，潜台词是作为其朋友，自己肯定也不会差到哪去。 有时我们觉得别人误会了自己，其实是我们误会了自己。 所谓人生理想，就是支持你捱过每天的无聊与痛苦，最终没有实现的那个愿望。有了它，临死前是无穷的空虚和痛苦；没有它，这辈子都熬不下来。 好多重要又紧迫的事情，先干哪一件都会感觉别的事情被耽误了。所以还是先上会儿网吧。 很多时候别人对你好，并不是因为别人喜欢你，而是因为他们喜欢对人好。 女生有这样的梦想：某一天辛苦工作之后，在客户处认识一位优秀男人。他自信. Self-centered. 成熟. 幽默，又对人很 caring。你们坠入爱河。他对你说：别工作了，我帮你开家咖啡馆吧！于是你的生活变了，每天在充满情调的咖啡馆里钻研咖啡甜点。你又开始相信爱情了。后来你发现男朋友开了十几家咖啡馆了。 年轻的男孩只希望自己的女朋友是美丽的。而随着他不断长大，阅历的不断积累，他终归会认识到：美丽并不是选择伴侣的全部，性感也很重要。 如果你是长得好看的话，在公车地铁上睡着了，头靠在旁边人的肩上，旁边的人会一直陪着你直到醒来。你要是长的丑的话，头一旦靠在旁边的人肩上，他会立即拍醒你，并温馨提醒你保管好财物。 “妈不是说你，你看你找那个对象，长得那么丑，话也说不明白，我要是和别人说这是我女婿我都觉得丢人”“他家有十几个亿。”“当然了，人也没必要活得那么虚荣，为什么非要在意别人的看法呢？更何况爱情本来就是盲目的，妈支持你！”喜欢，赞！]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[网站多服务器部署]]></title>
    <url>%2Fwebsite-multiple-server-deploy.html</url>
    <content type="text"><![CDATA[再玩博客的时候从hexo静态博客，切换到了firekylin。本身我的服务器是在日本的，但是总感觉访问特别慢，特别是在公司的时候，根本打不开了。正好朋友在阿里云也买了服务器，根据屈屈大神在博客里的提示，于是想把自己的博客在国内外都部署一下。再次做个记录 主要步骤 网站部署 数据库同步 拓展阅读]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CentOS6 安装docker]]></title>
    <url>%2Fcentos6-install-docker.html</url>
    <content type="text"><![CDATA[Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的运行效率，降低了云计算资源供应的成本！ 使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！ 无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，以在有限的时间内做更多有意义的事。 首先查看系统版本1234567lsb_release -a# LSB Version: :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch# Distributor ID: CentOS# Description: CentOS release 6.8 (Final)# Release: 6.8# Codename: Final 添加 yum 源12345678sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 要在 CentOS-6 上安装 docker，请利用以下指令安装 docker-io 组件： 1sudo yum install docker-io 安装 docker 后，你必须引导该服务才能应用它。 1sudo service docker start 若要开机时引导 docker 服务： 1sudo chkconfig docker on 拓展阅读 DOCKER 学习笔记 Docker — 从入门到实践]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[博客从hexo到firekylin遇到的问题]]></title>
    <url>%2Fblog-from-hexo-to-firekylin.html</url>
    <content type="text"><![CDATA[我的博客很早是听朋友说 hexo，静态博客很吊，于是就用了，但是发现自己学习不了什么东西，于是就想能不能换个动态的。当然最早的就是 wp，但是发现速度很慢。这时有听朋友说 Thinkjs（所以说多跟朋友聊聊天，哈哈），有个 firekylin 博客，基于 nodejs，自己至少能看懂些。所以就转到这里了。但是问题又来了，这个博客竟然没有个好看的主题…作为(前)设计师怎么能忍。于是就有了以下。 使用线上数据代码上传到git上，再从别的地方clone下来，需要重新安装数据库。能不能直接用呢。查看 firekylin 的源码之后发现。线上和本地的差别在于两个文件 .installed是否安装 1firekylin src/common/config/db.js数据库配置 12345678910111213141516'use strict'exports.__esModule = trueexports.default = &#123; type: 'mysql', adapter: &#123; mysql: &#123; host: 'localhost', port: '3306', database: 'fk_blog', user: 'root', password: '123456', prefix: 'fk_', type: 'mysql' &#125; &#125;&#125; 解决 nunjucks 纯文本输出firekylin 使用了 nunjucks 作为渲染模板，但是在渲染文章简介的时候老是会把 html 标签给带过来一起给渲染了。我这里的解决办法是，给 nunjucks 添加自定义过滤器。 找到src/common/config/view.js并修改 12345678910111213141516171819202122232425262728293031323334353637'use strict'import &#123; parse &#125; from 'url'const build_query = obj =&gt; '?' + Object.keys(obj) .map(k =&gt; encodeURIComponent(k) + '=' + encodeURIComponent(obj[k])) .join('&amp;')/** * template config */export default &#123; type: 'nunjucks', content_type: 'text/html', file_ext: '.html', file_depr: '_', root_path: think.ROOT_PATH + '/view', adapter: &#123; nunjucks: &#123; prerender: function(nunjucks, env) &#123; env.addFilter('utc', time =&gt; new Date(time).toUTCString()) env.addFilter('pagination', function(page) &#123; let &#123; pathname, query &#125; = parse(this.ctx.http.url, true) query.page = page return pathname + build_query(query) &#125;) // 添加自定义过滤器 提取纯文本 env.addFilter('text', function(str) &#123; let reg = /&lt;[^&gt;]*&gt;/g // 过滤html标签正则 return str.replace(reg, '') // 返回纯文本 &#125;) &#125; &#125; &#125;&#125; 解决后台编译错误不能显示不知道为毛，把代码复制下来之后，后台死活不能显示。线上正常。 突然灵机一动，是不是因为线上用的npm安装依赖，本地用的cnpm安装依赖。于是果断试下。结果不出所料。]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[修改centos6时区]]></title>
    <url>%2Fchange-centos6-datezone.html</url>
    <content type="text"><![CDATA[修改 centos6 时区在写文章的时候发现文章的时间都已经下午了，而我明明是在早上写的，突然想到会不会是时区问题。 时区的相关命令12345date -R # 显示完整时间+时区date +%z # 只显示时区# 修改时区 到 上海 即东八区cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 时区的信息存在/usr/share/zoneinfo/下面，本机的时区信息存在/etc/localtime 拓展阅读 CentOS 6 时间，时区，设置修改及时间同步]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[docker学习笔记]]></title>
    <url>%2Fdocker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[最近学习发现，没有什么所谓的系统性学习，如果这个地方不明白可能是别的概念你不懂，这不，学着学着跑到 docker 了。记录下自己的心得。 学前必读如何通俗解释 Docker 是什么？ 大白话 Docker 入门(一) 大白话 Docker 入门(二) Docker 的应用场景在哪里？ 未完待续…]]></content>
  </entry>
  <entry>
    <title><![CDATA[数组去重方法整理]]></title>
    <url>%2F%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86.html</url>
    <content type="text"><![CDATA[数组去重经常遇到，这里把他们整理到一起，以便日后用到。 方式 1：使用 shift()获取并删除删除数组的第一个元素，判断这个元素是否还存在于数组中，如果存在则说明这个元素的是重复的；如果不存在，进行 push()操作 123456789101112function unique(a)&#123; if(Array.isArray(a))&#123; var len = a.length,item; while(len--)&#123; item = a.shift(); if(a.indexOf(item) === -1)&#123; a.push(item); &#125; &#125; &#125; return a;&#125; 方式 2：建立一个哈希表，通过对象属性查询去除重复元素 123456789101112131415function unique(array)&#123; var hash = &#123;&#125;, len = array.length, result = [], i; for(i = 0; i &lt; len; i++)&#123; if(!hash[a[i]])&#123; hash[a[i]] = true; result.push(a[i]); &#125; &#125; return result;&#125; 方式 3：思路和方式 2 类似，但是简洁很多 1234567function unique(arr) &#123; var hash = &#123;&#125;; return arr.filter(function (n) &#123; hash[n] = (hash[n] || 0); return (++hash[n] &lt;= 1); &#125;);&#125;]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[在hexo中无痛使用本地图片]]></title>
    <url>%2F%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E7%97%9B%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87.html</url>
    <content type="text"><![CDATA[1 起因在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。 这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。 hexo 下插入图片现在大概有几个方案 1.1 放在根目录早期大部分的方案是把图片放在 source/img 下，然后在 markdown 里写 ![img](/source/img/img.png) 。显然这样在本地的编辑器里完全不能正确识别图片的位置。 1.2 asset-image在 hexo 2.x 时出现的插件，后来被吸纳进 hexo 3 core ，用法的介绍见 资源文件夹 | Hexo 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。 2 解决方案CodeFalling/hexo-asset-image 2.1 使用首先确认 _config.yml 中有 post_asset_folder:true 。 在 hexo 目录，执行 1npm install https://github.com/CodeFalling/hexo-asset-image --save 假设在 1234├── apppicker.jpg├── logo.jpg└── rules.jpgMacGesture2-Publish.md 这样的目录结构（目录名和文章名一致），只要使用 ![logo](MacGesture2-Publish/logo.jpg)就可以插入图片。 生成的结构为 1234├── apppicker.jpg├── index.html├── logo.jpg└── rules.jpg 同时，生成的 html 是 1&lt;img src=&quot;/2015/10/18/MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt; 而不是愚蠢的 1&lt;img src=&quot;MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt; 值得一提的是，这个插件对于 CodeFalling/hexo-renderer-org 同样有效。 原文地址: https://github.com/CodeFalling/hexo-renderer-org]]></content>
  </entry>
  <entry>
    <title><![CDATA[chrome禁止https跳转]]></title>
    <url>%2Fchrome%E7%A6%81%E6%AD%A2https%E8%B7%B3%E8%BD%AC.html</url>
    <content type="text"><![CDATA[最近使用 nginx 配置本地代理，进行本地测试的时候，发现 http 网站总会跳转到 https，很是苦恼，网上找了很多办法发下下面这种办法还是有效的。 原因chrome 升级最新版后，为了安全考虑，如果站点支持 https，会强制跳转到 https。并且 chrome 会记录 dns，下次访问会直接重定向到 https 站点。 解决思路知道原因之后，下面就是解决办法，删除 chrome 的 dns 记录就行了。 具体步骤1chrome://net-internals/ 页面右端红条上有个黑色的下三角 12clear cacheflush sockets 清除两项即可]]></content>
  </entry>
  <entry>
    <title><![CDATA[时间Date学习笔记]]></title>
    <url>%2F%E6%97%B6%E9%97%B4Date%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[Date 类型使用自 UTC（Coordinated Universal Time，国际协调时间）1970 年 1 月 1 日午夜（零时）开始经过的毫秒数来保存日期。Date 类型保存的日期能够精确到 1970 年 1 月 1 日之前或之后的 285 616 年。 创建创建 date 对象，使用 new 操作符和 Date 构造函数 1var date = new Date(); 不传参新创建的对象自动获得当前日期和时间 传参Date.parse() 月/日/年”，如 6/13/2004;var date = new Date(Date.parse(&#39;6/13/2004&#39;)) 英文月名日，年”，如 January,12,2004;var date = new Date(Date.parse(&#39;January,12,2004&#39;)) 英文星期几英文月名日年时：分：秒时区”，如 Tue May 25 2004 00:00:00 GMT-0700。var date = new Date(Date.parse(&#39;Tue May 25 2004 00:00:00 GMT-0700&#39;)) ISO 8601 扩展格式 YYYY-MM-DDTHH:mm:ss.sssZ（例如 2004-05-25T00:00:00）。只有兼容 ECMAScript 5 的实现支持这种格式。var date = new Date(Date.parse(&#39;2004-05-25T00:00:00&#39;)) 如果传入 Date.parse()方法的字符串不能表示日期，那么它会返回 NaN。实际上，如果直接将表示日期的字符串传递给 Date 构造函数，也会在后台调用 Date.parse(),即 12345var date = new Date(&apos;6/13/2004&apos;);// 等价于var date = new Date(Date.parse(&apos;6/13/2004&apos;)); Date.UTC()Date.UTC()的参数分别是 年份(必须) 月份(必须)（0-11） 天（1-31，默认 1） 小时数（0-23,默认 0） 分钟（默认 0） 秒（默认 0） 毫秒数（默认 0）]]></content>
  </entry>
  <entry>
    <title><![CDATA[Github killed by single2.]]></title>
    <url>%2FGithub-killed-by-single2.html</url>
    <content type="text"><![CDATA[Github 一直使用正常，可是突然有一天，发现不能提交了，很是郁闷。网上找了一圈也没找到原因。无意间发现，原来是 Github 的公钥(ssh public key)过期了. 错误信息 1Github killed by single2. 解决办法其实很简单，把公钥重新配置一遍即可。 顺便运行下以下命令，确保可用 1ssh -T -p 443 git@ssh.github.com]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[数组Array学习笔记]]></title>
    <url>%2F%E6%95%B0%E7%BB%84Array%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[“虽然 ECMAScript 数组与其他语言中的数组都是数据的有序列表，但与其他语言不同的是，ECMAScript 数组的每一项可以保存任何类型的数据。也就是说，可以用数组的第一个位置来保存字符串，用第二位置来保存数值，用第三个位置来保存对象，以此类推。而且，ECMAScript 数组的大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。” 摘录来自: 泽卡斯. “JavaScript 高级程序设计（第 3 版）”。 iBooks. 创建12345678910var arr = [];var arr = new Array();var arr = [1,2,3];var arr = new Array(1,2,3);var arr = new Array(3); // [undefined,undefined,undefined]var arr = [&apos;red&apos;,&apos;blue&apos;,&apos;yellow&apos;];var arr = new Array(&apos;red&apos;,&apos;blue&apos;,&apos;yellow&apos;); 检测12arr instanceof Array //true 为数组Array.isArray(arr) //true 为数组 转换12345var arr = [1,2,3]arr.toString();arr.valueOf();arr.toLocaleString();// return 1,2,3 toLocaleString()方法经常也会返回与 toString()和 valueOf()方法相同的值，但也不总是如此。当调用数组的 toLocaleString()方法时，它也会创建一个数组值的以逗号分隔的字符串。而与前两个方法唯一的不同之处在于，这一次为了取得每一项的值，调用的是每一项的 toLocale-String()方法，而不是 toString()方法。 栈方法&amp;队列方法栈方法栈是一种 LIFO（Last-In-First-Out，后进先出）的数据结构，也就是最新添加的项最早被移除。 push&amp;pop123456var arr = [1,2];arr.push(3); //3alert(arr); //[1,2,3]arr.pop(); //3alert(arr); //[1,2] 队列方法队列数据结构的访问规则是 LIFO（ First-In-First-Out，先进先出） push&amp;shift123456var arr = [1,2];arr.push(3); //3alert(arr); //[1,2,3]arr.shift(); //1alert(arr); //[2,3] unshiftE7 及更早版本对 JavaScript 的实现中存在一个偏差，其 unshift()方法总是返回 undefined 而不是数组的新长度。IE8 在非兼容模式下会返回正确的长度值。 123var arr = [1,2];arr.unshift(1); //返回length 3alert(arr); //[1,2,3] 排序reverse反转数组 123var arr = [1,2,3];arr.reverse();alert(arr); //[3,2,1] sort在默认情况下，sort()方法按升序排列数组项一一即最小的值位于最前面，最大的值排在最后面。为了实现排序，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串 123456789101112131415161718192021222324252627var arr = [1,5,10,15];arr.sort(); // [1,10,15,5];/*因为数值5虽然小于10，但在进行字符串比较时，&quot;10&quot;则位于&quot;5&quot;的前面，于是数组的顺序就被修改了。*/function compare(value1,value2)&#123; if(value1 &gt; value2)&#123; return -1; &#125;else if(value1 &lt; value2)&#123; return 1; &#125;else&#123; return 0; &#125;&#125;arr.sort(compare); //[1,5,10,15]function compare(value1,value2)&#123; if(value1 &gt; value2)&#123; return 1; &#125;else if(value1 &lt; value2)&#123; return -1; &#125;else&#123; return 0; &#125;&#125;arr.sort(compare); //[15,10,5,1] 操作concat复制并返回副本 123var arr = [1,2];arr.concat(3,4,5); //[1,2,3,4,5]alert(arr); //[1,2] slice1234567var arr = [1,2,3,4];arr.slice(1) //[2,3,4]arr.slice(1,3); //[2,3]arr.slice(-1); //[4]arr.slice(-1,-3); //[]arr.slice(-3,-1); //[2,3] splice删除 12var arr = [1,2,3];arr.splice(1,1); //[1,3] 增加 123var arr = [1,2,3];arr.splice(1,0,4); //[1,4,2,3]arr.splice(1,0,&apos;a&apos;,&apos;b&apos;); //[1,&apos;a&apos;,&apos;b&apos;,4,2,3] 插入替换 12var arr = [1,2,3];arr.splice(1,1,4); //[1,4,3] 位置indexOf返回索引,从前到后 12var arr = [1,2,3];arr.indexOf(2); //1 lastIndexOf返回索引,从后到前 12var arr = [1,2,3];arr.lastIndexOf(2); //1 迭代every对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true。 12345var arr = [1,2,3];arr.every(function(item,index,arr)&#123; return item &gt; 2;&#125;)// false some对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true。 12345var arr = [1,2,3];arr.some(function(item,index,arr)&#123; return item &gt; 2;&#125;)// true filter对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组。 12345var arr = [1,2,3];arr.filter(function(item,index,arr)&#123; return item &gt; 2;&#125;)// [3] map对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。 1234567891011var arr = [1,2,3];arr.map(function(item,index,arr)&#123; return item &gt; 2;&#125;)// [false,false,true]arr.map(function(item,index,arr)&#123; return item * 2;&#125;)//[2,4,6] forEach对数组中的每一项运行给定函数。这个方法没有返回值。 12345var arr = [1,2,3];arr.forEach(function(item,index,arr)&#123; item &gt; 2 ? console.log(&apos;大于2&apos;) : console.log(&apos;小于2&apos;);&#125;)//小于2 小于2 大于2 缩小reduce和reduceRight两个方法都会迭代数组的所有项，然后构建一个最终返回的值。 reduce12345var arr = [1,2,3];arr.reduce(function(prev,cur,index,arr)&#123; return prev + cur;&#125;)//1+2+3=6 reduceRight1234var arr = [1,2,3];arr.reduceRight(function(prev,cur,index,arr)&#123; return prev + cur;&#125;) includeses7，如果数组中包含某值返回 true 12var arr = [1,2,3];arr.includes(2); //true]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[利用Nginx和Host把自定义域名指向本地]]></title>
    <url>%2F%E5%88%A9%E7%94%A8Nginx%E5%92%8CHost%E6%8A%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%8C%87%E5%90%91%E6%9C%AC%E5%9C%B0.html</url>
    <content type="text"><![CDATA[假如有域名 a.com，怎么把它和自己的本地目录做链接呢？今天玩 Nginx 的时候终于知道怎么玩了。简单记录一下。 原理 利用 hosts 把域名指向本地即 127.0.0.1 利用 nginx 进行域名跳转和目录指定 实施安装 nginx1brew install nginx 修改配置 12sudo vim /usr/local/etc/nginx/nginx.conf#修改默认的8080端口为80 如果你开启了 apache，可能会造成 403，把 apache 关了就行 给予管理员权限 12sudo chown root:wheel /usr/local/opt/nginx/bin/nginxsudo chmod u+s /usr/local/opt/nginx/bin/nginx 加入 launchctl 启动控制 123mkdir -p ~/Library/LaunchAgentscp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist 运行 nginx 123sudo nginx #打开 nginxnginx -s reload|reopen|stop|quit #重新加载配置|重启|停止|退出 nginxnginx -t #测试配置是否有语法错误 用法详解 1nginx [-?hvVtq] [-s signal] [-c filename] [-p prefix] [-g directives] 选项列表 123456789-?,-h : 打开帮助信息-v : 显示版本信息并退出-V : 显示版本和配置选项信息，然后退出-t : 检测配置文件是否有语法错误，然后退出-q : 在检测配置文件期间屏蔽非错误信息-s signal : 给一个 nginx 主进程发送信号：stop（停止）, quit（退出）, reopen（重启）, reload（重新加载配置文件）-p prefix : 设置前缀路径（默认是：/usr/local/Cellar/nginx/1.2.6/）-c filename : 设置配置文件（默认是：/usr/local/etc/nginx/nginx.conf）-g directives : 设置配置文件外的全局指令 配置以上都完成之后，浏览器输入 localhost 如果能够正常访问证明就可以了。 接下来进行下一步的配置 找到 nginx 的配置目录，不同的版本可能不太一样我的是在/usr/local/etc/nginx，进入servers目录，有的可能叫conf.d，新建你的配置文件 1vim demo.conf 编辑配置文件 12345server &#123; listen 80; server_name a.com; root /Users/dctxf/Desktop/demo;&#125; 浏览器输入 a.com 是不是能访问了。 问题mac hosts 文件不生效在学习过程中发现 hosts 文件不生效，必须重启，后来才发现重启网络服务就行，具体什么原因还不是很清楚，网上有说是因为浏览器的长链接，关闭浏览器或者隐身模式访问，我试了下还是不行。因为我用了 surge，发现重新加载 surge 的配置文件就行，不清楚具体原因。 nginx 命令不能用输入 nginx 命令后会提示无此命令，应该是环境变量的问题，我的解决办法是修改了.zshrc 的配置 1export PATH=$&#123;PATH&#125;:/usr/local/Cellar/nginx/1.10.1/bin]]></content>
  </entry>
  <entry>
    <title><![CDATA[浏览器模式[标准模式与怪异模式]]]></title>
    <url>%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%BC%8F-%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%80%AA%E5%BC%82%E6%A8%A1%E5%BC%8F.html</url>
    <content type="text"><![CDATA[最近在做项目的时候，浏览器老是提示JQMIGRATE: jQuery is not compatible with Quirks Mode，一直想不通是为什么，查询之后才知道原来浏览器是有模式的。下面是我对浏览器模式的简单理解。 下面引自网络由于历史的原因，各个浏览器在对页面的渲染上存在差异，甚至同一浏览器在不同版本中，对页面的渲染也不同。在 W3C 标准出台以前，浏览器在对页面的渲染上没有统一规范，产生了差异(Quirks mode 或者称为 Compatibility Mode)；由于 W3C 标准的推出，浏览器渲染页面有了统一的标准(CSScompat 或称为 Strict mode 也有叫做 Standars mode)，这就是二者最简单的区别。 W3C 标准推出以后，浏览器都开始采纳新标准，但存在一个问题就是如何保证旧的网页还能继续浏览，在标准出来以前，很多页面都是根据旧的渲染方法编写的，如果用的标准来渲染，将导致页面显示异常。为保持浏览器渲染的兼容性，使以前的页面能够正常浏览，浏览器都保留了旧的渲染方法（如：微软的 IE）。这样浏览器渲染上就产生了 Quircks mode 和 Standars mode，两种渲染方法共存在一个浏览器上。 火狐一直工作在标准模式下，但 IE（6，7，8）标准模式与怪异模式差别很大，主要体现在对盒子模型的解释上，这个很重要，下面就重点说这个。 浏览器究竟该采用哪种模式渲染这就引出的 DTD，既是网页的头部声明，浏览器会通过识别 DTD 而采用相对应的渲染模式： 浏览器要使老旧的网页正常工作，但这部分网页是没有 doctype 声明的，所以浏览器对没有 doctype 声明的网页采用 quirks mode 解析。 对于拥有 doctype 声明的网页，什么浏览器采用何种模式解析，这里有一张详细列表可参考：http://hsivonen.iki.fi/doctype。 对于拥有 doctype 声明的网页，这里有几条简单的规则可用于判断：对于那些浏览器不能识别的 doctype 声明，浏览器采用 strict mode 解析。 在 doctype 声明中，没有使用 DTD 声明或者使用 HTML4 以下（不包括 HTML4）的 DTD 声明时，基本所有的浏览器都是使用 quirks mode 呈现，其他的则使用 strict mode 解析。 可以这么说，在现有有 doctype 声明的网页，绝大多数是采用 strict mode 进行解析的。 在 ie6 中，如果在 doctype 声明前有一个 xml 声明(比如:)，则采用 quirks mode 解析。这条规则在 ie7 中已经移除了。 如何设置为怪异模式：方法一：在页面项部加1&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN”&gt; 方法二：什么也不加。如何设置为标准模式：123&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “http://www.w3.org/TR/html4/loose.dtd”&gt;&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN” “http://www.w3.org/TR/html4/strict.dtd”&gt;&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Frameset//EN” “http://www.w3.org/TR/html4/frameset.dtd”&gt; XHTML1.0 提供了三种 DOCTYPE 可选择：过渡型（Transitional ）1&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd”&gt; 严格型（Strict ）1&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd”&gt; 框架型（Frameset ）1&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Frameset//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd”&gt; 如何判定现在是标准模式还是怪异模式：方法一：执行以下代码123alert(window.top.document.compatMode) ;//BackCompat 表示怪异模式//CSS1Compat 表示标准模式 方法二：jquery 为我们提供的方法，如下：12alert($.boxModel)alert($.support.boxModel) 注意：为了我们写的代码更好的兼容，请一定要让浏览器使用标准模式渲染]]></content>
  </entry>
  <entry>
    <title><![CDATA[欢迎收看89hi前端视频]]></title>
    <url>%2F%E6%AC%A2%E8%BF%8E%E6%94%B6%E7%9C%8B89hi%E5%89%8D%E7%AB%AF%E8%A7%86%E9%A2%91.html</url>
    <content type="text"><![CDATA[我们是一个有正义感的组织。欢迎前端的小伙伴一起来交流分享。 感谢收看 89hi 前端分享。欢迎加入我们进一步分享和交流学习。 1234我们的群号：130977811我们的微信订阅号：weiHTML我们的官网：89hi.com我们的爱奇艺：http://www.iqiyi.com/u/1109204243 如有疑问或者建议可直接与管理员联系，或者到我们的官网反馈。]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Apple Remote Desktop正版洗白方法]]></title>
    <url>%2FApple%20Remote%20Desktop%E6%AD%A3%E7%89%88%E6%B4%97%E7%99%BD%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[Apple Remote Desktop 是 Mac 端远程控制工具，我个人本身是非常支持正版的，可是这个实在太贵了。你懂的，网上搜的方法，分享给大家。 1.下载 v 3.7.2 版本 ：http://pan.baidu.com/s/1jGmrhuI 密码：vg2r 序列号： XARD-030-000-N-LXC-RP7-FBX-23P-6ML-YBF-F xard-030-000-r-lys-pws-rhh-qjq-wbf-jax-2 XARD-030-000-R-KKS-RAG-FHT-WAZ-WSX-LBE-2 好了，接下来就是打开 AppStore 开始正版更新了，Have Fun！]]></content>
  </entry>
  <entry>
    <title><![CDATA[流畅滚动的N条军规]]></title>
    <url>%2F%E6%B5%81%E7%95%85%E6%BB%9A%E5%8A%A8%E7%9A%84N%E6%9D%A1%E5%86%9B%E8%A7%84.html</url>
    <content type="text"><![CDATA[网上看大神的视频做了下小笔记，挺实用的。希望对大家有所帮助，注意：是移动端的开放喔！ body 上加上-webkit-overflow-scrolling:touch iOS 尽量使用局部滚动 iOS 引进 ScrollFix 避免出界 Android 下尽量使用全局滚动 尽量不用overflow:auto 使用min-height:100%代替height:100% iOS 下带有滚动条且position:absoulte的节点不要设置背景色]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mac下用命令查看目录[文件夹]内容大小]]></title>
    <url>%2FMac%E4%B8%8B%E7%94%A8%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E7%9B%AE%E5%BD%95-%E6%96%87%E4%BB%B6%E5%A4%B9-%E5%86%85%E5%AE%B9%E5%A4%A7%E5%B0%8F.html</url>
    <content type="text"><![CDATA[Mac 下输入ls命令可以查看当前文件列表，但是没用文件到大小，很不方便。废话不多说，直接上代码。 把命令存为 alias已安装 oh my zsh依次输入以下命令 1vim ~/.zshrc 添加以下代码到.zshrc里面 1alias ldu=&apos;ls -1 | xargs du -h -d 0 2&gt;/dev/null&apos; 输入以下命令让配置生效 1source ~/.zshrc 未安装 zsh将代码保存到.bashrc 到现在为止你就可以用ldu来查看文件大小了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mac下新安装的MySQL无法登陆root用户解决方法]]></title>
    <url>%2FMac%E4%B8%8B%E6%96%B0%E5%AE%89%E8%A3%85%E7%9A%84MySQL%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86root%E7%94%A8%E6%88%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[也不知是何原因，新安装好的 MySQL，如果尝试用mysql -u root -p登陆就会出现这样的错误，但是 root 用户根本就没有设置密码。ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO) 网上搜了很多，最后发现原来是 mysql 升级了，安装的时候需要注意下，以前 mysql 的 root 用户密码为 root，新版安装则会生成一个随机密码，一定要记得这个秘密。如果你折腾了很久，建议把 mysql 删除重新安装，记好安装时候弹出的秘密喔！ 这样再次按照正常流程输入密码就行了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ajax详细学习笔记]]></title>
    <url>%2FAjax%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[一直以为 ajax 是一个很神奇的东西，好容易在网上找到视频，下面是我学习的一些学习笔记，希望对大家有所帮助。本文从 http 基础说起，相信大家能看懂的，请耐心喔！ [TOC] HTTP介绍 超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。通过 HTTP 或者 HTTPS 协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。 HTTP 是一种无状态协议。（不建立持久的链接） 维基百科解释 完整 HTTP 请求 建立 TCP 连接 Web 浏览器向 Web 服务器发送请求命令 Web 浏览器发送请求头信息 Web 服务器应答 Web 服务器发送应答头信息 Web 服务器向浏览器发送数据 Web 服务器关闭 TCP 连接 HTTP 组成 HTTP 请求的方法或动作，（例：GET 或 POST） 正在请求的 URL 请求头（包含客户端环境信息，身份验证信息等） 请求体，也是请求正文（包含客户提交的查询字符串信息，表单信息等） 请求状态HTTP 状态码由 3 位数字构成，其中首位数字定义了状态码的类型 1XX信息类，表示收到 Web 浏览器请求，正在进一步处理中 2XX成功，表示用户请求被正确接收，理解和处理（例：200 OK） 3XX重定向，表示请求没有成功，客户必须采取进一步动作 4XX客户端错误，表示客户端提交的请求有错误（例：404 NOT Found，意味请求中所引用的文档不存在） 5XX服务端错误，表示服务器不能完成对请求对处理（例：500） HTTP 请求GET 请求 一般用于信息获取 使用 URL 传递参数 对发送信息数量有限制，一版在 2000 个字符 POST 请求 一般用于修改服务器上资源 对发送信息数量无限制 HTTP 响应 一个数字和文字组成的状态码（成功，失败等） 响应头（包含服务器类型，日期时间，内容类型，长度等） 响应体，也是响应正文 request 对象兼容写法123456var request;if (window.XMLHttpRequest) &#123; request = new XMLHttpRequest();&#125; else &#123; request = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);&#125; 主要方法open(method,url,async)send(string)取得响应responseText获得字符串形式的响应数据 responseXML获得 XML 形式的响应数据 status 和 statusText以数字和文本形式返回 HTTP 状态码 getAllResponseHeader()获取所有的响应报头 getResponseHeader()查询响应中的某个字段值 readyState会返回 0，1，2，3，4 几个值 0:请求未初始化，open 还没有调用1:服务器连接已建立，open 已经调用2:请求已接收，即接收到头信息了3:请求处理中，即接收到响应主体4:请求已完成，且响应已就绪，即响应完成 1234567request.open(&apos;GET&apos;, &apos;get.php&apos;, true);request.send();request.onreadystatechange = function() &#123; if (request.readyState === 4 &amp;&amp; request.status === 200) &#123; //做一些事情 request.responseText &#125;&#125;; JSON介绍javascript 对象表示法（javaScript Object Notation） JSON 是存储和交换文本信息的语法，类似 XML。它采用健值对的方式组织，易于阅读，编写和机器解析，生成 JSON 是独立于语言的，即任何语言都可以解析 JSON，只需要按照 JSON 的规则即可 优点 json 的长度和 xml 相比更小 json 读写速度更快 json 可以使用 javascript 内建的方法直接解析，转换成 javascript 对象方便 书写格式（名称/值对）名称/值对组合中的名称写在前面（在双引号中），值对写在后面（同样在双引号中），中间用冒号隔开（例：”name”:”dctxf”） 可用类型 数字（整数和浮点数） 例：123 123.123 字符串（在双引号中） 例：”dctxf” 逻辑值（true 或 false） 例：true 数组（在方括号中） 例：[1，2，3，4] 对象（在花括号中） 例：{} null 解析方式 eval和JSON.parse 在代码中使用 eval 是恨危险的！特别是用它执行第三方的 JSON 数据（其中可能包含恶意代码）时，尽可能使用JSON.parse()方法解析字符串本身，该方法还可以捕捉 JSON 中的语法错误。 JSON 字符串 1var data = &apos;&#123;&quot;fruit&quot;: [&#123;&quot;name&quot;: &quot;apple&quot;,&quot;number&quot;: 10&#125;, &#123;&quot;name&quot;: &quot;orange&quot;,&quot;number&quot;: 12&#125;]&#125;&apos;; eval1234var oJson = eval(&apos;(&apos; + data + &apos;)&apos;);console.log(oJson.fruit[0].name);//输出 apple 由于eval可以解析以下 1eval(&apos;alert(1)&apos;); 所以尽量不要使用eval JSON.parse1234var oJson = JSON.parse(data);console.log(oJson.fruit[0].name);//输出 apple 拓展阅读拓展阅读json 官网 跨域 域名地址组成 当协议、子域名、主域名、端口号中任意一个不想同时，都算做跨域 不用域之间相互请求资源，就算做跨域 Javascript 出于安全方面考虑，不允许跨域调用其它页面的对象 服务器代理JSONP只能对GET请求起作用 XHR2 html5 提供 XMLHttpRequest Level2 已经实现了跨域访问及其它新功能 IE10 以下版本不支持]]></content>
  </entry>
  <entry>
    <title><![CDATA[window对象的top、parent、opener含义]]></title>
    <url>%2Fwindow%E5%AF%B9%E8%B1%A1%E7%9A%84top%E3%80%81parent%E3%80%81opener%E5%90%AB%E4%B9%89.html</url>
    <content type="text"><![CDATA[经常使用 window 对象，是否了解他的 top、parent、opener、self 属性呢？今天就来一探究竟 [TOC] 介绍top永远指分割窗口最高层次的浏览器窗口。如果计划从分割窗口的最高层次开始执行命令，就可以用 top 变量。 opener用于在window.open的页面引用执行该window.open方法的的页面的对象。 例如：A 页面通过 window.open()方法弹出了 B 页面，在 B 页面中就可以通过 opener 来引用 A 页面，这样就可以通过这个对象来对 A 页面进行操作。 parent用于在 iframe,frame 中生成的子页面中访问父页面的对象。 例如：A 页面中有一个 iframe 或 frame，那么 iframe 或 frame 中的页面就可以通过 parent 对象来引用 A 页面中的对象。这样就可以获取或返回值到 A 页面中。 self指的是当前窗口 parent 与 opener 的区别parentparent 指父窗口，在 FRAMESET 中，FRAME 的 PARENT 就是 FRAMESET 窗口。 opener opener 指用 WINDOW.OPEN 等方式创建的新窗口对应的原窗口。 parent 是相对于框架来说父窗口对象 opener 是针对于用 window.open 打开的窗口来说的父窗口，前提是 window.open 打开的才有 1document.parentWindow.menthod() 調用父頁面的方法 Window 对象、Parent 对象、Frame 对象、Document 对象和 Form 对象的阶层关系1Window对象→Parent对象→Frame对象→Document对象→Form对象， 如下： 1parent.frame1.document.forms[0].elements[0].value;]]></content>
  </entry>
  <entry>
    <title><![CDATA[GitHub创建静态网站预览方法]]></title>
    <url>%2FGitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%A2%84%E8%A7%88%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[平时做个项目想给别人预览？自己搭个博客没有空间？让我们一起看看怎么用 Github 来帮我们解决这些问题吧 方法一：通过第三方开源项目预览访问 1[http://htmlpreview.github.io](http://htmlpreview.github.io) 然后把你的 Github 地址放入点击回车就行了 方法二：通过创建分支预览创建 gh-pages 分支进行预览，创建完分支后，访问 1http://你的Github名.github.io/你的Github项目名/ 例如：http://dctxf.github.io/blog/]]></content>
  </entry>
  <entry>
    <title><![CDATA[清理Mac中的其它]]></title>
    <url>%2F%E6%B8%85%E7%90%86Mac%E4%B8%AD%E7%9A%84%E5%85%B6%E5%AE%83.html</url>
    <content type="text"><![CDATA[在 Mac OS X 10.7 Lion 系统及以后版本，新增了两个小功能[版本]和[自动保存]。当用户对某个文件进行编辑使用的时候，系统会自动将文件状态保存，并形成有用的序列制作成一个类似时光机器的序列，今后用户可以随时恢复某一个时间段的档案状态；另外编辑文档之后也不用刻意去保存了，系统可以直接保存。功能好是好，但是对于敏感隐私文件，也不是很安全，会留下许多“痕迹”，另外[版本]也可能出现一些小错误搞得我们心烦，对于这些状况最好的办法就是手动清楚[版本]的历史记录。 在 Mac OS X 中，[版本]的缓存目录存放在系统根目录如下位置： 1/.DocumentRevisions-V100/ 来使用最安全的方法清楚这些文件夹：打开 终端，输入如下代码： 1cd / 如果真的决定删除，那么再输入如下代码核实目录名称： 1ls -l .DocumentRevisions-V100 执行删除操作： 1sudo rm -rf .DocumentRevisions-V100 这样操作并不会使[版本]功能失效，只是将器管理的历史记录删除掉了。 如果再次有程序需要[版本]生成记录，那么刚才删除的目录会再次出现。 rm -rf这种命令会更改系统后文件，不了解请不要用到其他方面。]]></content>
  </entry>
  <entry>
    <title><![CDATA[用苹果电脑MAC控制PC的方法]]></title>
    <url>%2F%E7%94%A8%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91MAC%E6%8E%A7%E5%88%B6PC%E7%9A%84%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[今天教你如何用 mac 远程控制 pc，有木有有点小激动呢？快点开看看吧 步骤 点此下载微软支持软件 打开 win 远程访问权限 1系统-&gt;属性-&gt;远程]]></content>
  </entry>
  <entry>
    <title><![CDATA[网页cookie学习笔记]]></title>
    <url>%2F%E7%BD%91%E9%A1%B5cookie%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[学习 cookie 的一些小笔记，希望给大家点帮助 123456789101112131415161718192021222324252627282930313233343536373839/** * [setCookie 设置cookie] * @param &#123;[type]&#125; name [名字] * @param &#123;[type]&#125; value [值] * @param &#123;[type]&#125; day [过期时间] */function setCookie(name , value , day)&#123; var oDate = new Date(); oDate.setDate(oDate.getDate() + day); // 设置过期时间 document.cookie = name + &apos;=&apos; + value + &apos;;expires=&apos; + oDate;&#125;/** * [getCookie 获取cookie] * @param &#123;[type]&#125; name [名字] * @return &#123;[type]&#125; [返回值无则返回空] */function getCookie(name)&#123; var arr = document.cookie.split(&apos;; &apos;); var i = 0; for(;i &lt; arr.length;i++)&#123; var arr2 = arr[i].split(&apos;=&apos;); if (arr2[0] == name) &#123; return arr2[1]; &#125; &#125; return &apos;&apos;;&#125;/** * [removeCookie 删除cookie] * @param &#123;[type]&#125; name [名字] */function removeCookie(name)&#123; setCookie(name,&apos;&apos;,-1);&#125; firefox 支持本地查看 cookie，其他浏览器需要启动 http 服务]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mac（OSX）使用VPN小技巧——国内外访问分流]]></title>
    <url>%2FMac%EF%BC%88OSX%EF%BC%89%E4%BD%BF%E7%94%A8VPN%E5%B0%8F%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E5%9B%BD%E5%86%85%E5%A4%96%E8%AE%BF%E9%97%AE%E5%88%86%E6%B5%81.html</url>
    <content type="text"><![CDATA[自从 Mac 用上了 VPN，科学的上网让我的小 Mac 充满了活力。巴特，也带来了一个大问题，开启 VPN 的时候访问国内网站有时候特别慢。难道要我每次访问国内都要断开，访问国外再连上，接受无能啊！！！实际上，大部分 windows 的 VPN 客户端软件，都集成国内外分流的功能，非常便捷，而 Mac 上目前还没有类似的软件有此功能，好吧，只能自己动手，丰衣足食了。 为什么要分流 自从 Mac 用上了 VPN，科学的上网让我的小 Mac 充满了活力。巴特，也带来了一个大问题，开启 VPN 的时候访问国内网站有时候特别慢。难道要我每次访问国内都要断开，访问国外再连上，接受无能啊！！！实际上，大部分 windows 的 VPN 客户端软件，都集成国内外分流的功能，非常便捷，而 Mac 上目前还没有类似的软件有此功能，好吧，只能自己动手，丰衣足食了。 Mac 下国内外访问分流有啥好处？ 连上 VPN 以后，不会影响访问国内网站的速度 有些 VPN 提供的是流量套餐，如果不分流，一个月流量伤不起啊 ##如何实现 Mac 下 VPN 的国内外分流？Mac 下的分流方法来源于 chnroute 这个项目，对作者表示衷心的感谢项目地址：https://github.com/jimmyxu/chnroutes此项目不仅仅是针对 Mac，而且同时支持 windows/linux，以及基于 linux 的路由器。 Mac 下的使用步骤： 首先，你要弄一个 VPN 并且设置好 PPTP，免费 VPN 之前我介绍过一个合集，可以看这里; 下载chnroutes.py这个文件，比如保存到下载里面，下载地址 打开终端进入下载文件所在的目录，执行python chnroutes.py -p mac，在该目录下会生成 2 个文件，ip-up和ip-down； 1234macbookair:~ Peter$ cd Downloadsmacbookair:Downloads Peter$ python chnroutes.py -p macFetching data from apnic.net, it might take a few minutes, please wait...For pptp on mac only, please copy ip-up and ip-down to the /etc/ppp folder,don&apos;t forget to make them executable with the chmod command. 打开 Finder 进入下载，可以找到刚刚生成的 2 个文件，选中并复制这 2 个文件；按下快捷键command+shift+g，弹出的地方输入/etc/ppp，进入此目录，粘贴； 回到终端，进入目录/etc/ppp执行：sudo chmod a+x ip-up ip-down 12macbookair:Downloads Peter$ cd /etc/pppmacbookair:ppp Peter$ sudo chmod a+x ip-up ip-down （这一步可能会提示输入系统密码）好了，Done！连上 VPN 测试一下吧。 如何测试是否成功？比较简单的测试方法是打开 2 个 ip 地址查询网站。如果一切正常，连上 vpn 以后，打开 ip138，会显示你本来的 ip 地址（你还在国内），打开这个网站，会显示 vpn 服务器的 ip 地址（你到国外了）。 高端一点的，可以在终端输入traceroute www.baidu.com以及traceroute www.youtube.com，看看访问国内网站和国外网站的路由情况。 如果我不想要分流了，怎么破？直接把/etc/ppp下面那 2 个文件删了就行了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[各种浏览器全屏模式的方法、属性和事件介绍]]></title>
    <url>%2F%E5%90%84%E7%A7%8D%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E5%B1%8F%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%81%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BA%8B%E4%BB%B6%E4%BB%8B%E7%BB%8D.html</url>
    <content type="text"><![CDATA[浏览器全屏模式的启动函数requestFullscreen仍然需要附带各浏览器的 js 方言前缀，相信下面这段代码需要你花大量的搜索才能凑齐： 123456789101112//判断各种浏览器，找到正确的方法function launchFullscreen(element) &#123; if(element.requestFullscreen) &#123; element.requestFullscreen(); &#125; else if(element.mozRequestFullScreen) &#123; element.mozRequestFullScreen(); &#125; else if(element.webkitRequestFullscreen) &#123; element.webkitRequestFullscreen(); &#125; else if(element.msRequestFullscreen) &#123; element.msRequestFullscreen(); &#125;&#125; 启动全屏123launchFullScreen(document.documentElement); // 整个网页launchFullScreen(document.getElementById(&quot;videoElement&quot;)); // 某个页面元素 对你想要全屏显示的页面元素调用全屏方法，浏览器窗口就会变成全屏，但会先请求用户允许全屏模式。要注意，用户很有可能会拒绝全屏模式。如果用户运行全屏模式，则浏览器的工具条等按钮菜单都会隐藏，你的页面会覆盖整个屏幕。 退出全屏模式 这个exitFullscreen方法(也需要加浏览器前缀)会让浏览器退出全屏模式，变成正常模式。 123456789101112// 判断浏览器种类function exitFullscreen() &#123; if(document.exitFullscreen) &#123; document.exitFullscreen(); &#125; else if(document.mozCancelFullScreen) &#123; document.mozCancelFullScreen(); &#125; else if(document.webkitExitFullscreen) &#123; document.webkitExitFullscreen(); &#125;&#125;// 退出全屏模式!exitFullscreen(); 需要注意的是，exitFullscreen只能由document对象调用，而不是启动全屏时传入的对象。 全屏属性和事件 不幸的是，全屏属性和事件的相关方法也需要添加浏览器前缀，但我相信很快就不需要这样做了。 document.fullScreenElement:全屏显示的网页元素。 document.fullScreenEnabled:判断当前是否处于全屏状态。 fullscreenchange事件会在启动全屏或退出全屏时触发： 12var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;var fullscreenEnabled = document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled; 你仍然可以使用上面判断浏览器种类的方法给这个事件加上前缀。 全屏样式 CSS 各种浏览器都提供了一个非常有用的全屏模式时的 css 样式规则： 123456789101112131415161718192021222324252627282930313233:-webkit-full-screen &#123; /* properties */&#125;:-moz-full-screen &#123; /* properties */&#125;:-ms-fullscreen &#123; /* properties */&#125;:full-screen &#123; /*pre-spec */ /* properties */&#125;:fullscreen &#123; /* spec */ /* properties */&#125;/* deeper elements */:-webkit-full-screen video &#123; width: 100%; height: 100%;&#125;/* styling the backdrop*/::backdrop &#123; /* properties */&#125;::-ms-backdrop &#123; /* properties */&#125; 有些情况下，WebKit 样式会出现一些问题，你最好把这些样式保持简洁。 这些全屏 API 都超级的简单，而且超级的有用。我第一次是在 MDN’s BananaBread demo 中看到这个 API 的，那是一个枪击游戏，正好需要全屏化，它使用了事件监听来检测全屏状态。记住这些好用的 API，需要的时候可以顺手拈来。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[论版权保护的重要性]]></title>
    <url>%2F%E8%AE%BA%E7%89%88%E6%9D%83%E4%BF%9D%E6%8A%A4%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7.html</url>
    <content type="text"><![CDATA[随着中国经济的发展和互联网的快速发展，版权的重要性越来越受到大家的重视。那么今天我就讲一下自己对版权保护自己的一些理解。 先来谈谈大家对版权保护对误解，很多人认为版权保护严了导致软件开始收费了，歌曲开始收费了，似乎大家对开销越来越多，可是大家想过吗？就是因为盗版的出现，我们的工作难找了，收入降低了。大量的盗版让公司经营不善倒闭，更多人选择使用盗版，让很好的公司倒闭。大概形成了这样的循环： 创新－盗版－收益降低－工资降低－公司破产－找工作更难（因为好公司都给挤破产了）－工资更低（相对于，因为大家创新能力更低了，公司都没有你怎么提升自己，公司怎么给你提工资）－产品差劲－然后无限循环，最终你可能转行 听起来很像玩笑话，可是现实就是这样。相对应的好处其实也不少。 一：版权保护是对个人发展有很好的帮助我是一名设计师，我相信我的同行估计很多都认为自己的工资不高，其实原因很简单，设计的抄袭，素材没有版权，导致我们的作品价值太低，因为即使你做出来了，其他人照抄就行。这里我想说一个网站就是猪八戒网，上面的竞争让设计师们形成了恶性竞争，而且对版权的极其不尊重。设计师的辛苦根本得不到回报。我们可以看到国外的设计师就是卖素材，估计都比我们挣得多。可能有些人会反驳我，说国内的设计师能力不行。是这样吗？请问在国内抄就行了，为什么要创新？久而久之，大家自然变得懒了，好的作品也就少了，好的设计师也同样。所以，版权保护，从自我做起。 二：版权保护有利于提升公司竞争力这点其实不用多说，现在 N 多公司的专利战就很能体现这一点。很多只知道抄袭的公司就不说了，没创新还想自己厉害，怎么可能。 三：版权保护可以促进创新这点其实也很好理解，简单的说，很多东西别人都有了专利，那么你不得不创新。其次，版权的保护让很多有实力的公司或个人得到了实惠，他们会鼓励更多的创新，并进行版权保护。 不过说实话，由于目前法律还不够完善，版权的保护只能靠大家的共同努力，所以说目前来说，保护版权人人有责。当然这也是一个过程，希望大家在自己的能力范围之内支持正版。有些定价过高的，不支持也罢，版权保护并不意味着垄断，某些公司也应该好好想想。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>想法</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于颠覆一词的理解]]></title>
    <url>%2F%E5%85%B3%E4%BA%8E%E9%A2%A0%E8%A6%86%E4%B8%80%E8%AF%8D%E7%9A%84%E7%90%86%E8%A7%A3.html</url>
    <content type="text"><![CDATA[自从互联网思维火起来以后，颠覆这个词也跟着火了起来。今天就聊下颠覆这个词。 什么是颠覆？乍一听似乎不是一个好词，很像搞破坏的，其实我认为结果是好的，它推动的不仅仅是本行业，我认为对整个社会都是好的。但是颠覆不应该是把原来的行业破坏掉，而是让它有更好的方式运作。 什么行业应该被颠覆？首先应该确定的是不好的东西应该被改掉，好的东西为什么要颠覆？或者说是破坏掉？所以像微信这种已经做的很好的，有很多人想着要颠覆，听了以后真的想笑。颠覆本身一件好事，搞得却像耍流氓了。 怎样颠覆？ 首先颠覆的第一条应该是对你服务的用户有益的，这样就有了颠覆的可能性。 第二从一个边缘业务切入，温水煮青蛙比拿把刀到处喊着强。 第三是根据第二点来，当你拥有良好口碑的时候，基本就可以触碰他们的核心业务了。第四就是把别人的专业做的更好。 怎样算是颠覆呢？就是打破原有的价值链，产生新的价值链。没有新价值链的产生就是破坏，所以颠覆之前要想清楚。 本文是我的个人理解，希望对大家有帮助。]]></content>
      <tags>
        <tag>想法</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[品牌的形成与发展]]></title>
    <url>%2F%E5%93%81%E7%89%8C%E7%9A%84%E5%BD%A2%E6%88%90%E4%B8%8E%E5%8F%91%E5%B1%95.html</url>
    <content type="text"><![CDATA[突然想写这篇文章是因为一次面试，面试官的一些话让我陷入了沉思，写这篇文章也仅仅是表达我个人的观点。 随着社会经济的发展，我们身边不断涌现出很多好的品牌，但同时也出现了许多不好的案例，那么究竟为何会出现这样的状况呢？ 首先我认为品牌的解释应该是这样的：“品即品质，牌即形象。”构成品牌其实就是这两步，绝对良好的品质加上优质的品牌形象。 这里的品质，不单单是产品的品质，更是公司的品质。最近有篇文章写的事世界上的百年企业，一个企业能够传承百年，跟他良好的品质绝对是分不开的。 接下来说说牌，形象分为两种一种是有型的，一种是无形的。有型的形象就比如说 logo，代言人等，那么无形的形象就是印象。 解释完了，咱们来说说品牌的形成，先来举个栗子，相信大家对 lv 的故事都有所了解，它通过一个故事告诉大家，它的品质绝对是可靠的，从此一举成名。当然也有反例，就是三鹿，因为品质的关系曾经积累的品牌瞬间瓦解。有了品质，成名或许只是时间或者机遇的问题。当然成名后就是牌发挥作用的时候了，良好的可视化形象会让大家更有助于了解你的品牌，但它绝对不是影响你品牌的重要因素，一个企业不会因为换个 logo 或者代言人而从此落寞。但是无形的形象就显得格外重要，它不仅仅是你品质的表现，更有你的精神所在，它经过时间的积累会给人更深刻的印象。但同时大家都很清楚，好的形象很难积累，坏的形象很难被消除，如何从一而终就显得尤为重要。 说到这里就可以聊聊品牌的发展了，时代的不同对品牌的诠释也是不同的，但最基础的本质不会变。品牌的发展应该是对品牌的补充，而不是对品牌的彻底颠覆。 今天就写到这里了，此文仅代表我自己的拙见。]]></content>
      <tags>
        <tag>想法</tag>
        <tag>思考</tag>
        <tag>品牌</tag>
      </tags>
  </entry>
</search>
